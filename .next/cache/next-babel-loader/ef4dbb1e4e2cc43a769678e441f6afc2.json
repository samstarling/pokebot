{"ast":null,"code":"import { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { installer } from \"../../lib/slack/installer\";\nimport { RESPONDERS } from \"../../lib/responders\";\nconst prisma = new PrismaClient();\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\nslackEvents.on(\"app_mention\", async event => {\n  const installData = await installer.authorize({\n    teamId: event.team\n  });\n  const web = new WebClient(installData.botToken);\n  RESPONDERS.forEach(async r => {\n    const sanitizedText = event.text.toLowerCase().replace(\"’\", \"'\");\n\n    if (sanitizedText.includes(r.triggerPhrase.toLowerCase())) {\n      r.respond(event, web, prisma);\n    }\n  });\n});\nexport default slackEvents.requestListener();\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/pages/api/event.ts"],"names":["createEventAdapter","WebClient","PrismaClient","installer","RESPONDERS","prisma","slackEvents","process","env","SLACK_SIGNING_SECRET","on","event","installData","authorize","teamId","team","web","botToken","forEach","r","sanitizedText","text","toLowerCase","replace","includes","triggerPhrase","respond","requestListener","config","api","bodyParser","externalResolver"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,mBAAnC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SAASC,SAAT,QAA0B,2BAA1B;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,MAAMC,MAAM,GAAG,IAAIH,YAAJ,EAAf;AAEA,MAAMI,WAAW,GAAGN,kBAAkB,CAACO,OAAO,CAACC,GAAR,CAAYC,oBAAZ,IAAoC,EAArC,CAAtC;AAEAH,WAAW,CAACI,EAAZ,CAAe,aAAf,EAA8B,MAAOC,KAAP,IAA+B;AAC3D,QAAMC,WAAW,GAAG,MAAMT,SAAS,CAACU,SAAV,CAAoB;AAAEC,IAAAA,MAAM,EAAEH,KAAK,CAACI;AAAhB,GAApB,CAA1B;AACA,QAAMC,GAAG,GAAG,IAAIf,SAAJ,CAAcW,WAAW,CAACK,QAA1B,CAAZ;AAEAb,EAAAA,UAAU,CAACc,OAAX,CAAmB,MAAOC,CAAP,IAAa;AAC9B,UAAMC,aAAa,GAAGT,KAAK,CAACU,IAAN,CAAWC,WAAX,GAAyBC,OAAzB,CAAiC,GAAjC,EAAsC,GAAtC,CAAtB;;AACA,QAAIH,aAAa,CAACI,QAAd,CAAuBL,CAAC,CAACM,aAAF,CAAgBH,WAAhB,EAAvB,CAAJ,EAA2D;AACzDH,MAAAA,CAAC,CAACO,OAAF,CAAUf,KAAV,EAAiBK,GAAjB,EAAsBX,MAAtB;AACD;AACF,GALD;AAMD,CAVD;AAYA,eAAeC,WAAW,CAACqB,eAAZ,EAAf;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE,KADT;AAEHC,IAAAA,gBAAgB,EAAE;AAFf;AADe,CAAf","sourcesContent":["import { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { installer } from \"../../lib/slack/installer\";\nimport { MentionEvent } from \"../../lib/slack\";\nimport { RESPONDERS } from \"../../lib/responders\";\n\nconst prisma = new PrismaClient();\n\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\n\nslackEvents.on(\"app_mention\", async (event: MentionEvent) => {\n  const installData = await installer.authorize({ teamId: event.team });\n  const web = new WebClient(installData.botToken);\n\n  RESPONDERS.forEach(async (r) => {\n    const sanitizedText = event.text.toLowerCase().replace(\"’\", \"'\");\n    if (sanitizedText.includes(r.triggerPhrase.toLowerCase())) {\n      r.respond(event, web, prisma);\n    }\n  });\n});\n\nexport default slackEvents.requestListener();\n\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}