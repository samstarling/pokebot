{"ast":null,"code":"const EMOJI = {\n  1: \"f\"\n};\nexport const emojiFor = poke => {\n  if (poke.number > 151) {\n    return \"sparkles\";\n  }\n\n  return EMOJI[poke.number] || poke.name.toLowerCase();\n};\nexport const pickOne = items => {\n  if (items.length === 0) throw new Error(\"Must provide a non-empty list\");\n  return items[Math.floor(Math.random() * items.length)];\n};\nconst IMAGE_PREFIX = \"https://cdn.traction.one/pokedex/pokemon\";\nexport const imageFor = poke => {\n  if (poke.number === 492) {\n    return `${IMAGE_PREFIX}/${poke.number}-land.png`;\n  }\n\n  return `${IMAGE_PREFIX}/${poke.number}.png`;\n};\nexport const assignRandomPokemon = async (prisma, teamId, userId, where) => {\n  return prisma.pokemon.findMany({\n    where\n  }).then(pokes => pickOne(pokes)).then(poke => assignPokemonToUser(prisma, teamId, userId, poke.number));\n};\nexport const assignPokemonToUser = async (prisma, teamId, userId, number) => {\n  return prisma.roll.create({\n    data: {\n      teamId: teamId,\n      userId: userId,\n      Pokemon: {\n        connect: {\n          number\n        }\n      }\n    },\n    include: {\n      Pokemon: true\n    }\n  });\n};\nexport const currentPokemonForUser = async (prisma, teamId, userId) => {\n  const rolls = await prisma.roll.findMany({\n    where: {\n      teamId,\n      userId\n    },\n    orderBy: {\n      createdAt: \"desc\"\n    },\n    take: 1,\n    include: {\n      Pokemon: true\n    }\n  });\n\n  if (rolls.length === 0) {\n    return null;\n  }\n\n  return rolls[0].Pokemon;\n};\nexport const renderType = p => {\n  if (p.secondaryType) {\n    return `:pokemon_type_${p.primaryType}: ${camelCase(p.primaryType)} / :pokemon_type_${p.secondaryType}: ${camelCase(p.secondaryType)}`;\n  }\n\n  return `:pokemon_type_${p.primaryType}: ${camelCase(p.primaryType)}`;\n};\n\nconst camelCase = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const statusFor = pokemon => {\n  const {\n    name,\n    classification\n  } = pokemon;\n  return pickOne([`*${name}* (${classification}) is doing OK, thanks for checking in.`, `*${name}* (${classification}) is great – but a little hungry.`, `*${name}* (${classification}) is annoyed that you forgot their birthday last week.`, `*${name}* (${classification}) is good.`, `*${name}* (${classification}) is doing well.`, `*${name}* (${classification}) is happy and healthy.`, `*${name}* (${classification}) is looking great today.`, `*${name}* (${classification}) thinks you look nice today.`, `*${name}* (${classification}) says your doing a great job.`, `*${name}* (${classification}) is says they're lucky to have you.`, `*${name}* (${classification}) is just glad to be here.`, `*${name}* (${classification}) loves you.`, `*${name}* (${classification}) is alright.`, `*${name}* (${classification}) is great.`, `*${name}* (${classification}) is excellent.`, `*${name}* (${classification}) is lovely.`, `*${name}* (${classification}) is completing mandatory training – Fs in chat please.`, `*${name}* (${classification}) has been better, actually.`, `*${name}* (${classification}) has the sniffles.`, `*${name}* (${classification}) is doing well.`, `*${name}* (${classification}) is doing OK.`, `*${name}* (${classification}) is just fine.`, `*${name}* (${classification}) is having a bit of a rough day.`, `*${name}* (${classification}) would like a hug.`, `*${name}* (${classification}) could do with a holiday.`, `*${name}* (${classification}) is looking forward to Christmas, which is definitely something that Pokémon celebrate.`, `Shit, that's a hench *${name}* (${classification}).`, `Goodness, what a large *${name}* (${classification}).`, `Looks like *${name}* (${classification}) is happy.`, `Looks like *${name}* (${classification}) is having a great time.`, `Looks like *${name}* (${classification}) is having a well-earned break.`, `Your *${name}* (${classification}) is looking healthy.`, `Your *${name}* (${classification}) is looking happy.`, `Your *${name}* (${classification}) is well.`, `Your *${name}* (${classification}) is just great.`, `Your *${name}* (${classification}) is swell.`]);\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/pokemon/index.ts"],"names":["EMOJI","emojiFor","poke","number","name","toLowerCase","pickOne","items","length","Error","Math","floor","random","IMAGE_PREFIX","imageFor","assignRandomPokemon","prisma","teamId","userId","where","pokemon","findMany","then","pokes","assignPokemonToUser","roll","create","data","Pokemon","connect","include","currentPokemonForUser","rolls","orderBy","createdAt","take","renderType","p","secondaryType","primaryType","camelCase","str","charAt","toUpperCase","slice","statusFor","classification"],"mappings":"AAEA,MAAMA,KAA8B,GAAG;AACrC,KAAG;AADkC,CAAvC;AAIA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAA2B;AACjD,MAAIA,IAAI,CAACC,MAAL,GAAc,GAAlB,EAAuB;AACrB,WAAO,UAAP;AACD;;AAED,SAAOH,KAAK,CAACE,IAAI,CAACC,MAAN,CAAL,IAAsBD,IAAI,CAACE,IAAL,CAAUC,WAAV,EAA7B;AACD,CANM;AAQP,OAAO,MAAMC,OAAO,GAAOC,KAAJ,IAAsB;AAC3C,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB,MAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACxB,SAAOF,KAAK,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,KAAK,CAACC,MAAjC,CAAD,CAAZ;AACD,CAHM;AAKP,MAAMK,YAAY,GAAG,0CAArB;AAEA,OAAO,MAAMC,QAAQ,GAAIZ,IAAD,IAA2B;AACjD,MAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACvB,WAAQ,GAAEU,YAAa,IAAGX,IAAI,CAACC,MAAO,WAAtC;AACD;;AAED,SAAQ,GAAEU,YAAa,IAAGX,IAAI,CAACC,MAAO,MAAtC;AACD,CANM;AAQP,OAAO,MAAMY,mBAAmB,GAAG,OACjCC,MADiC,EAEjCC,MAFiC,EAGjCC,MAHiC,EAIjCC,KAJiC,KAK9B;AACH,SAAOH,MAAM,CAACI,OAAP,CACJC,QADI,CACK;AAAEF,IAAAA;AAAF,GADL,EAEJG,IAFI,CAEEC,KAAD,IAAWjB,OAAO,CAACiB,KAAD,CAFnB,EAGJD,IAHI,CAGEpB,IAAD,IAAUsB,mBAAmB,CAACR,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBhB,IAAI,CAACC,MAA9B,CAH9B,CAAP;AAID,CAVM;AAYP,OAAO,MAAMqB,mBAAmB,GAAG,OACjCR,MADiC,EAEjCC,MAFiC,EAGjCC,MAHiC,EAIjCf,MAJiC,KAK9B;AACH,SAAOa,MAAM,CAACS,IAAP,CAAYC,MAAZ,CAAmB;AACxBC,IAAAA,IAAI,EAAE;AACJV,MAAAA,MAAM,EAAEA,MADJ;AAEJC,MAAAA,MAAM,EAAEA,MAFJ;AAGJU,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE;AACP1B,UAAAA;AADO;AADF;AAHL,KADkB;AAUxB2B,IAAAA,OAAO,EAAE;AACPF,MAAAA,OAAO,EAAE;AADF;AAVe,GAAnB,CAAP;AAcD,CApBM;AAsBP,OAAO,MAAMG,qBAAqB,GAAG,OACnCf,MADmC,EAEnCC,MAFmC,EAGnCC,MAHmC,KAIP;AAC5B,QAAMc,KAAK,GAAG,MAAMhB,MAAM,CAACS,IAAP,CAAYJ,QAAZ,CAAqB;AACvCF,IAAAA,KAAK,EAAE;AAAEF,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KADgC;AAEvCe,IAAAA,OAAO,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAF8B;AAGvCC,IAAAA,IAAI,EAAE,CAHiC;AAIvCL,IAAAA,OAAO,EAAE;AACPF,MAAAA,OAAO,EAAE;AADF;AAJ8B,GAArB,CAApB;;AASA,MAAII,KAAK,CAACxB,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,IAAP;AACD;;AAED,SAAOwB,KAAK,CAAC,CAAD,CAAL,CAASJ,OAAhB;AACD,CAnBM;AAqBP,OAAO,MAAMQ,UAAU,GAAIC,CAAD,IAAwB;AAChD,MAAIA,CAAC,CAACC,aAAN,EAAqB;AACnB,WAAQ,iBAAgBD,CAAC,CAACE,WAAY,KAAIC,SAAS,CACjDH,CAAC,CAACE,WAD+C,CAEjD,oBAAmBF,CAAC,CAACC,aAAc,KAAIE,SAAS,CAACH,CAAC,CAACC,aAAH,CAAkB,EAFpE;AAGD;;AAED,SAAQ,iBAAgBD,CAAC,CAACE,WAAY,KAAIC,SAAS,CAACH,CAAC,CAACE,WAAH,CAAgB,EAAnE;AACD,CARM;;AAUP,MAAMC,SAAS,GAAIC,GAAD,IAAyB;AACzC,SAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAArC;AACD,CAFD;;AAIA,OAAO,MAAMC,SAAS,GAAIzB,OAAD,IAA8B;AACrD,QAAM;AAAEhB,IAAAA,IAAF;AAAQ0C,IAAAA;AAAR,MAA2B1B,OAAjC;AACA,SAAOd,OAAO,CAAC,CACZ,IAAGF,IAAK,MAAK0C,cAAe,wCADhB,EAEZ,IAAG1C,IAAK,MAAK0C,cAAe,mCAFhB,EAGZ,IAAG1C,IAAK,MAAK0C,cAAe,wDAHhB,EAIZ,IAAG1C,IAAK,MAAK0C,cAAe,YAJhB,EAKZ,IAAG1C,IAAK,MAAK0C,cAAe,kBALhB,EAMZ,IAAG1C,IAAK,MAAK0C,cAAe,yBANhB,EAOZ,IAAG1C,IAAK,MAAK0C,cAAe,2BAPhB,EAQZ,IAAG1C,IAAK,MAAK0C,cAAe,+BARhB,EASZ,IAAG1C,IAAK,MAAK0C,cAAe,gCAThB,EAUZ,IAAG1C,IAAK,MAAK0C,cAAe,sCAVhB,EAWZ,IAAG1C,IAAK,MAAK0C,cAAe,4BAXhB,EAYZ,IAAG1C,IAAK,MAAK0C,cAAe,cAZhB,EAaZ,IAAG1C,IAAK,MAAK0C,cAAe,eAbhB,EAcZ,IAAG1C,IAAK,MAAK0C,cAAe,aAdhB,EAeZ,IAAG1C,IAAK,MAAK0C,cAAe,iBAfhB,EAgBZ,IAAG1C,IAAK,MAAK0C,cAAe,cAhBhB,EAiBZ,IAAG1C,IAAK,MAAK0C,cAAe,yDAjBhB,EAkBZ,IAAG1C,IAAK,MAAK0C,cAAe,8BAlBhB,EAmBZ,IAAG1C,IAAK,MAAK0C,cAAe,qBAnBhB,EAoBZ,IAAG1C,IAAK,MAAK0C,cAAe,kBApBhB,EAqBZ,IAAG1C,IAAK,MAAK0C,cAAe,gBArBhB,EAsBZ,IAAG1C,IAAK,MAAK0C,cAAe,iBAtBhB,EAuBZ,IAAG1C,IAAK,MAAK0C,cAAe,mCAvBhB,EAwBZ,IAAG1C,IAAK,MAAK0C,cAAe,qBAxBhB,EAyBZ,IAAG1C,IAAK,MAAK0C,cAAe,4BAzBhB,EA0BZ,IAAG1C,IAAK,MAAK0C,cAAe,0FA1BhB,EA2BZ,yBAAwB1C,IAAK,MAAK0C,cAAe,IA3BrC,EA4BZ,2BAA0B1C,IAAK,MAAK0C,cAAe,IA5BvC,EA6BZ,eAAc1C,IAAK,MAAK0C,cAAe,aA7B3B,EA8BZ,eAAc1C,IAAK,MAAK0C,cAAe,2BA9B3B,EA+BZ,eAAc1C,IAAK,MAAK0C,cAAe,kCA/B3B,EAgCZ,SAAQ1C,IAAK,MAAK0C,cAAe,uBAhCrB,EAiCZ,SAAQ1C,IAAK,MAAK0C,cAAe,qBAjCrB,EAkCZ,SAAQ1C,IAAK,MAAK0C,cAAe,YAlCrB,EAmCZ,SAAQ1C,IAAK,MAAK0C,cAAe,kBAnCrB,EAoCZ,SAAQ1C,IAAK,MAAK0C,cAAe,aApCrB,CAAD,CAAd;AAsCD,CAxCM","sourcesContent":["import { PrismaClient, Pokemon, PokemonWhereInput } from \"@prisma/client\";\n\nconst EMOJI: { [n: number]: string } = {\n  1: \"f\",\n};\n\nexport const emojiFor = (poke: Pokemon): string => {\n  if (poke.number > 151) {\n    return \"sparkles\";\n  }\n\n  return EMOJI[poke.number] || poke.name.toLowerCase();\n};\n\nexport const pickOne = <T>(items: T[]): T => {\n  if (items.length === 0) throw new Error(\"Must provide a non-empty list\");\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nconst IMAGE_PREFIX = \"https://cdn.traction.one/pokedex/pokemon\";\n\nexport const imageFor = (poke: Pokemon): string => {\n  if (poke.number === 492) {\n    return `${IMAGE_PREFIX}/${poke.number}-land.png`;\n  }\n\n  return `${IMAGE_PREFIX}/${poke.number}.png`;\n};\n\nexport const assignRandomPokemon = async (\n  prisma: PrismaClient,\n  teamId: string,\n  userId: string,\n  where: PokemonWhereInput\n) => {\n  return prisma.pokemon\n    .findMany({ where })\n    .then((pokes) => pickOne(pokes))\n    .then((poke) => assignPokemonToUser(prisma, teamId, userId, poke.number));\n};\n\nexport const assignPokemonToUser = async (\n  prisma: PrismaClient,\n  teamId: string,\n  userId: string,\n  number: number\n) => {\n  return prisma.roll.create({\n    data: {\n      teamId: teamId,\n      userId: userId,\n      Pokemon: {\n        connect: {\n          number,\n        },\n      },\n    },\n    include: {\n      Pokemon: true,\n    },\n  });\n};\n\nexport const currentPokemonForUser = async (\n  prisma: PrismaClient,\n  teamId: string,\n  userId: string\n): Promise<Pokemon | null> => {\n  const rolls = await prisma.roll.findMany({\n    where: { teamId, userId },\n    orderBy: { createdAt: \"desc\" },\n    take: 1,\n    include: {\n      Pokemon: true,\n    },\n  });\n\n  if (rolls.length === 0) {\n    return null;\n  }\n\n  return rolls[0].Pokemon;\n};\n\nexport const renderType = (p: Pokemon): string => {\n  if (p.secondaryType) {\n    return `:pokemon_type_${p.primaryType}: ${camelCase(\n      p.primaryType\n    )} / :pokemon_type_${p.secondaryType}: ${camelCase(p.secondaryType)}`;\n  }\n\n  return `:pokemon_type_${p.primaryType}: ${camelCase(p.primaryType)}`;\n};\n\nconst camelCase = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const statusFor = (pokemon: Pokemon): string => {\n  const { name, classification } = pokemon;\n  return pickOne([\n    `*${name}* (${classification}) is doing OK, thanks for checking in.`,\n    `*${name}* (${classification}) is great – but a little hungry.`,\n    `*${name}* (${classification}) is annoyed that you forgot their birthday last week.`,\n    `*${name}* (${classification}) is good.`,\n    `*${name}* (${classification}) is doing well.`,\n    `*${name}* (${classification}) is happy and healthy.`,\n    `*${name}* (${classification}) is looking great today.`,\n    `*${name}* (${classification}) thinks you look nice today.`,\n    `*${name}* (${classification}) says your doing a great job.`,\n    `*${name}* (${classification}) is says they're lucky to have you.`,\n    `*${name}* (${classification}) is just glad to be here.`,\n    `*${name}* (${classification}) loves you.`,\n    `*${name}* (${classification}) is alright.`,\n    `*${name}* (${classification}) is great.`,\n    `*${name}* (${classification}) is excellent.`,\n    `*${name}* (${classification}) is lovely.`,\n    `*${name}* (${classification}) is completing mandatory training – Fs in chat please.`,\n    `*${name}* (${classification}) has been better, actually.`,\n    `*${name}* (${classification}) has the sniffles.`,\n    `*${name}* (${classification}) is doing well.`,\n    `*${name}* (${classification}) is doing OK.`,\n    `*${name}* (${classification}) is just fine.`,\n    `*${name}* (${classification}) is having a bit of a rough day.`,\n    `*${name}* (${classification}) would like a hug.`,\n    `*${name}* (${classification}) could do with a holiday.`,\n    `*${name}* (${classification}) is looking forward to Christmas, which is definitely something that Pokémon celebrate.`,\n    `Shit, that's a hench *${name}* (${classification}).`,\n    `Goodness, what a large *${name}* (${classification}).`,\n    `Looks like *${name}* (${classification}) is happy.`,\n    `Looks like *${name}* (${classification}) is having a great time.`,\n    `Looks like *${name}* (${classification}) is having a well-earned break.`,\n    `Your *${name}* (${classification}) is looking healthy.`,\n    `Your *${name}* (${classification}) is looking happy.`,\n    `Your *${name}* (${classification}) is well.`,\n    `Your *${name}* (${classification}) is just great.`,\n    `Your *${name}* (${classification}) is swell.`,\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}