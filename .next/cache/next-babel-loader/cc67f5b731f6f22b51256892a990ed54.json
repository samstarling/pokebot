{"ast":null,"code":"import { emojiFor } from \"../pokemon\";\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (event, client, prisma) => {\n    await prisma.roll.findMany({\n      where: {\n        userId: event.user\n      },\n      include: {\n        Pokemon: true\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 5\n    }).then(async rolls => {\n      const text = rolls.map(r => descriptionFor(r.Pokemon)).join(\", \");\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Your most recent Pokémon were ${text}`\n      });\n    });\n  }\n};\n\nconst descriptionFor = p => `:${emojiFor(p)}: ${p.name}`;","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/history.ts"],"names":["emojiFor","id","triggerPhrase","respond","event","client","prisma","roll","findMany","where","userId","user","include","Pokemon","orderBy","createdAt","take","then","rolls","text","map","r","descriptionFor","join","chat","postMessage","channel","p","name"],"mappings":"AAGA,SAASA,QAAT,QAAyB,YAAzB;AAIA,eAAe;AACbC,EAAAA,EAAE,EAAE,SADS;AAEbC,EAAAA,aAAa,EAAE,SAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMA,MAAM,CAACC,IAAP,CACHC,QADG,CACM;AACRC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEN,KAAK,CAACO;AAAhB,OADC;AAERC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFD;AAGRC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAHD;AAIRC,MAAAA,IAAI,EAAE;AAJE,KADN,EAOHC,IAPG,CAOE,MAAOC,KAAP,IAAiB;AACrB,YAAMC,IAAI,GAAGD,KAAK,CAACE,GAAN,CAAWC,CAAD,IAAOC,cAAc,CAACD,CAAC,CAACR,OAAH,CAA/B,EAA4CU,IAA5C,CAAiD,IAAjD,CAAb;AACA,YAAMlB,MAAM,CAACmB,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,QAAAA,OAAO,EAAEtB,KAAK,CAACsB,OADa;AAE5BP,QAAAA,IAAI,EAAG,KAAIf,KAAK,CAACO,IAAK,mCAAkCQ,IAAK;AAFjC,OAAxB,CAAN;AAID,KAbG,CAAN;AAcD;AAtBY,CAAf;;AAyBA,MAAMG,cAAc,GAAIK,CAAD,IAAyB,IAAG3B,QAAQ,CAAC2B,CAAD,CAAI,KAAIA,CAAC,CAACC,IAAK,EAA1E","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient, Pokemon } from \"@prisma/client\";\n\nimport { emojiFor } from \"../pokemon\";\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\n\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    await prisma.roll\n      .findMany({\n        where: { userId: event.user },\n        include: { Pokemon: true },\n        orderBy: { createdAt: \"desc\" },\n        take: 5,\n      })\n      .then(async (rolls) => {\n        const text = rolls.map((r) => descriptionFor(r.Pokemon)).join(\", \");\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}> Your most recent Pokémon were ${text}`,\n        });\n      });\n  },\n} as Responder;\n\nconst descriptionFor = (p: Pokemon): string => `:${emojiFor(p)}: ${p.name}`;\n"]},"metadata":{},"sourceType":"module"}