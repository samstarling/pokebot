{"ast":null,"code":"import { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { installer } from \"../../lib/slack/installer\";\nimport { POKEMON, emojiFor } from \"../../lib/pokemon\";\nconst prisma = new PrismaClient();\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\nconst THANK_YOUS = [\"You're very welcome\", \"No problem\", \"No worries mate\", \"Any time\"];\n\nconst pickOne = items => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nconst AssignPokemon = {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (event, client) => {\n    const result = pickOne(POKEMON);\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id\n      }\n    });\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(result)}: It’s ${result.name.english}!`\n    });\n  }\n};\nconst QueryLatest = {\n  id: \"query-latest-pokemon\",\n  triggerPhrase: \"Who's my Pokémon?\",\n  respond: async (event, client) => {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: Your last roll was :${emojiFor(result)}: ${result.name.english}`\n    });\n  }\n};\nconst QueryStats = {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (event, client) => {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    const emoji = result.emoji || result.name.english.toLowerCase();\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: [`<@${event.user}>: :${emoji}: ${result.name.english}`, `*HP:* ${result.base.HP}`, `*Attack:* ${result.base.Attack}`, `*Defense:* ${result.base.Defense}`].join(\"\\n\")\n    });\n  }\n};\nconst Thanks = {\n  id: \"thanks\",\n  triggerPhrase: \"Thanks\",\n  respond: async (event, client) => {\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> ${pickOne(THANK_YOUS)}`\n    });\n  }\n};\nconst Reroll = {\n  id: \"reroll\",\n  triggerPhrase: \"Reroll\",\n  respond: async (event, client) => {\n    if (new Date().getDay() == 5) {\n      var _result$emoji;\n\n      var result = pickOne(POKEMON);\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: :${(_result$emoji = result.emoji) !== null && _result$emoji !== void 0 ? _result$emoji : result.name.english.toLowerCase()}: It’s ${result.name.english}!`\n      });\n    } else {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Sorry, only on a Friday`\n      });\n    }\n  }\n};\nconst Help = {\n  id: \"help\",\n  triggerPhrase: \"Help\",\n  respond: async (event, client) => {\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> There is no help, just roll a damn Pokémon already`\n    });\n  }\n};\nslackEvents.on(\"app_mention\", async event => {\n  const installData = await installer.authorize({\n    teamId: event.team\n  });\n  const web = new WebClient(installData.botToken);\n  [AssignPokemon, QueryLatest, QueryStats, Thanks, Reroll, Help].forEach(async r => {\n    const sanitizedText = event.text.toLowerCase().replace(\"’\", \"'\");\n\n    if (sanitizedText.includes(r.triggerPhrase.toLowerCase())) {\n      r.respond(event, web);\n    }\n  });\n});\nexport default slackEvents.requestListener();\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/pages/api/event.ts"],"names":["createEventAdapter","WebClient","PrismaClient","installer","POKEMON","emojiFor","prisma","slackEvents","process","env","SLACK_SIGNING_SECRET","THANK_YOUS","pickOne","items","Math","floor","random","length","AssignPokemon","id","triggerPhrase","respond","event","client","result","roll","create","data","teamId","team","userId","user","pokemonNumber","chat","postMessage","channel","text","name","english","QueryLatest","rolls","findMany","where","orderBy","createdAt","take","QueryStats","emoji","toLowerCase","base","HP","Attack","Defense","join","Thanks","Reroll","Date","getDay","Help","on","installData","authorize","web","botToken","forEach","r","sanitizedText","replace","includes","requestListener","config","api","bodyParser","externalResolver"],"mappings":"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","sourcesContent":["import { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { installer } from \"../../lib/slack/installer\";\nimport { POKEMON, emojiFor } from \"../../lib/pokemon\";\nimport { type } from \"os\";\n\nconst prisma = new PrismaClient();\n\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\n\nconst THANK_YOUS = [\n  \"You're very welcome\",\n  \"No problem\",\n  \"No worries mate\",\n  \"Any time\",\n];\n\ntype MentionEvent = {\n  channel: string;\n  text: string;\n  user: string;\n  team: string;\n  enterprise_id: string;\n};\n\nconst pickOne = <T>(items: T[]): T => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\ntype Responder = {\n  id: string;\n  triggerPhrase: string;\n  respond: (event: MentionEvent, client: WebClient) => void;\n};\n\nconst AssignPokemon: Responder = {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (event: MentionEvent, client: WebClient) => {\n    const result = pickOne(POKEMON);\n\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id,\n      },\n    });\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(result)}: It’s ${\n        result.name.english\n      }!`,\n    });\n  },\n};\n\nconst QueryLatest: Responder = {\n  id: \"query-latest-pokemon\",\n  triggerPhrase: \"Who's my Pokémon?\",\n  respond: async (event: MentionEvent, client: WebClient) => {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: Your last roll was :${emojiFor(result)}: ${\n        result.name.english\n      }`,\n    });\n  },\n};\n\nconst QueryStats: Responder = {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (event: MentionEvent, client: WebClient) => {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    const emoji = result.emoji || result.name.english.toLowerCase();\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: [\n        `<@${event.user}>: :${emoji}: ${result.name.english}`,\n        `*HP:* ${result.base.HP}`,\n        `*Attack:* ${result.base.Attack}`,\n        `*Defense:* ${result.base.Defense}`,\n      ].join(\"\\n\"),\n    });\n  },\n};\n\nconst Thanks: Responder = {\n  id: \"thanks\",\n  triggerPhrase: \"Thanks\",\n  respond: async (event: MentionEvent, client: WebClient) => {\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> ${pickOne(THANK_YOUS)}`,\n    });\n  },\n};\n\nconst Reroll: Responder = {\n  id: \"reroll\",\n  triggerPhrase: \"Reroll\",\n  respond: async (event: MentionEvent, client: WebClient) => {\n    if (new Date().getDay() == 5) {\n      var result = pickOne(POKEMON);\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: :${\n          result.emoji ?? result.name.english.toLowerCase()\n        }: It’s ${result.name.english}!`,\n      });\n    } else {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Sorry, only on a Friday`,\n      });\n    }\n  },\n};\n\nconst Help: Responder = {\n  id: \"help\",\n  triggerPhrase: \"Help\",\n  respond: async (event: MentionEvent, client: WebClient) => {\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> There is no help, just roll a damn Pokémon already`,\n    });\n  },\n};\n\nslackEvents.on(\"app_mention\", async (event: MentionEvent) => {\n  const installData = await installer.authorize({ teamId: event.team });\n  const web = new WebClient(installData.botToken);\n\n  [AssignPokemon, QueryLatest, QueryStats, Thanks, Reroll, Help].forEach(\n    async (r) => {\n      const sanitizedText = event.text.toLowerCase().replace(\"’\", \"'\");\n      if (sanitizedText.includes(r.triggerPhrase.toLowerCase())) {\n        r.respond(event, web);\n      }\n    }\n  );\n});\n\nexport default slackEvents.requestListener();\n\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}