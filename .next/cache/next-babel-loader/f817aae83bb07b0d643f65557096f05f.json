{"ast":null,"code":"import { GEN_ONE_POKEMON, emojiFor } from \"../pokemon\";\nexport default {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (event, client, prisma) => {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = GEN_ONE_POKEMON[roll.pokemonNumber - 1];\n    const emoji = emojiFor(result);\n    await client.chat.postMessage({\n      channel: event.channel,\n      blocks: [{\n        type: \"section\",\n        fields: [{\n          type: \"mrkdwn\",\n          text: \"*HP*\"\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Attack*\"\n        }, {\n          type: \"plain_text\",\n          text: `${pokemon.base.HP}`\n        }, {\n          type: \"plain_text\",\n          text: `${pokemon.base.Attack}`\n        }],\n        text: {\n          type: \"mrkdwn\",\n          text: `<@${event.user}>: It's ${pokemon.name.english}!`\n        },\n        accessory: {\n          type: \"image\",\n          image_url: `https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`,\n          alt_text: pokemon.name.english\n        }\n      }]\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/stats.ts"],"names":["GEN_ONE_POKEMON","emojiFor","id","triggerPhrase","respond","event","client","prisma","rolls","roll","findMany","where","teamId","team","userId","user","orderBy","createdAt","take","chat","postMessage","channel","text","result","pokemonNumber","emoji","blocks","type","fields","pokemon","base","HP","Attack","name","english","accessory","image_url","alt_text"],"mappings":"AAKA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,YAA1C;AAEA,eAAe;AACbC,EAAAA,EAAE,EAAE,aADS;AAEbC,EAAAA,aAAa,EAAE,mBAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMC,KAAK,GAAG,MAAMD,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqB;AACvCC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEP,KAAK,CAACQ,IAAhB;AAAsBC,QAAAA,MAAM,EAAET,KAAK,CAACU;AAApC,OADgC;AAEvCC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAF8B;AAGvCC,MAAAA,IAAI,EAAE;AAHiC,KAArB,CAApB;;AAMA,QAAIV,KAAK,CAAC,CAAD,CAAL,IAAY,IAAhB,EAAsB;AACpB,YAAMF,MAAM,CAACa,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,QAAAA,OAAO,EAAEhB,KAAK,CAACgB,OADa;AAE5BC,QAAAA,IAAI,EAAG,KAAIjB,KAAK,CAACU,IAAK;AAFM,OAAxB,CAAN;AAIA;AACD;;AAED,UAAMN,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAlB;AACA,UAAMe,MAAM,GAAGvB,eAAe,CAACS,IAAI,CAACe,aAAL,GAAqB,CAAtB,CAA9B;AACA,UAAMC,KAAK,GAAGxB,QAAQ,CAACsB,MAAD,CAAtB;AAEA,UAAMjB,MAAM,CAACa,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,MAAAA,OAAO,EAAEhB,KAAK,CAACgB,OADa;AAE5BK,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,MAAM,EAAE,CACN;AACED,UAAAA,IAAI,EAAE,QADR;AAEEL,UAAAA,IAAI,EAAE;AAFR,SADM,EAKN;AACEK,UAAAA,IAAI,EAAE,QADR;AAEEL,UAAAA,IAAI,EAAE;AAFR,SALM,EASN;AACEK,UAAAA,IAAI,EAAE,YADR;AAEEL,UAAAA,IAAI,EAAG,GAAEO,OAAO,CAACC,IAAR,CAAaC,EAAG;AAF3B,SATM,EAaN;AACEJ,UAAAA,IAAI,EAAE,YADR;AAEEL,UAAAA,IAAI,EAAG,GAAEO,OAAO,CAACC,IAAR,CAAaE,MAAO;AAF/B,SAbM,CAFV;AAoBEV,QAAAA,IAAI,EAAE;AACJK,UAAAA,IAAI,EAAE,QADF;AAEJL,UAAAA,IAAI,EAAG,KAAIjB,KAAK,CAACU,IAAK,WAAUc,OAAO,CAACI,IAAR,CAAaC,OAAQ;AAFjD,SApBR;AAwBEC,QAAAA,SAAS,EAAE;AACTR,UAAAA,IAAI,EAAE,OADG;AAETS,UAAAA,SAAS,EAAG,iDAAgDP,OAAO,CAAC3B,EAAG,MAF9D;AAGTmC,UAAAA,QAAQ,EAAER,OAAO,CAACI,IAAR,CAAaC;AAHd;AAxBb,OADM;AAFoB,KAAxB,CAAN;AAmCD;AA7DY,CAAf","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport { GEN_ONE_POKEMON, emojiFor } from \"../pokemon\";\n\nexport default {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = GEN_ONE_POKEMON[roll.pokemonNumber - 1];\n    const emoji = emojiFor(result);\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      blocks: [\n        {\n          type: \"section\",\n          fields: [\n            {\n              type: \"mrkdwn\",\n              text: \"*HP*\",\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Attack*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${pokemon.base.HP}`,\n            },\n            {\n              type: \"plain_text\",\n              text: `${pokemon.base.Attack}`,\n            },\n          ],\n          text: {\n            type: \"mrkdwn\",\n            text: `<@${event.user}>: It's ${pokemon.name.english}!`,\n          },\n          accessory: {\n            type: \"image\",\n            image_url: `https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`,\n            alt_text: pokemon.name.english,\n          },\n        },\n      ],\n    });\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}