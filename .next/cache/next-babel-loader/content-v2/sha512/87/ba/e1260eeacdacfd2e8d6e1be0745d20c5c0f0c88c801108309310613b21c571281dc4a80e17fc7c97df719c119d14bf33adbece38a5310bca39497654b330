{"ast":null,"code":"import { InstallProvider } from \"@slack/oauth\";\nimport { createClient } from \"redis\";\nconst client = createClient(process.env.REDIS_URL || \"\");\nexport const installer = new InstallProvider({\n  clientId: process.env.SLACK_CLIENT_ID || \"\",\n  clientSecret: process.env.SLACK_CLIENT_SECRET || \"\",\n  stateSecret: \"hehe-gravel-lol\",\n  installationStore: {\n    storeInstallation: installation => {\n      return new Promise(function (resolve) {\n        if (!installation.isEnterpriseInstall && installation.team != null) {\n          client.set(installation.team.id, JSON.stringify(installation), function (err, reply) {\n            console.log(\"Reply is\", reply);\n            console.error(\"Error is\", err);\n          });\n          resolve();\n        } else {\n          throw new Error(\"Not supported\");\n        }\n      });\n    },\n    fetchInstallation: installQuery => {\n      return new Promise(function (resolve, reject) {\n        if (!installQuery.isEnterpriseInstall && installQuery.teamId != null) {\n          console.log(\"Client get\", installQuery.teamId);\n          client.get(installQuery.teamId, function (_, reply) {\n            if (reply == null) {\n              return reject();\n            }\n\n            return resolve(JSON.parse(reply));\n          });\n        } else {\n          throw new Error(\"Not supported\");\n        }\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/slack/installer.ts"],"names":["InstallProvider","createClient","client","process","env","REDIS_URL","installer","clientId","SLACK_CLIENT_ID","clientSecret","SLACK_CLIENT_SECRET","stateSecret","installationStore","storeInstallation","installation","Promise","resolve","isEnterpriseInstall","team","set","id","JSON","stringify","err","reply","console","log","error","Error","fetchInstallation","installQuery","reject","teamId","get","_","parse"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,YAAT,QAA6B,OAA7B;AAEA,MAAMC,MAAM,GAAGD,YAAY,CAACE,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,EAA1B,CAA3B;AAEA,OAAO,MAAMC,SAAS,GAAG,IAAIN,eAAJ,CAAoB;AAC3CO,EAAAA,QAAQ,EAAEJ,OAAO,CAACC,GAAR,CAAYI,eAAZ,IAA+B,EADE;AAE3CC,EAAAA,YAAY,EAAEN,OAAO,CAACC,GAAR,CAAYM,mBAAZ,IAAmC,EAFN;AAG3CC,EAAAA,WAAW,EAAE,iBAH8B;AAI3CC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,iBAAiB,EAAGC,YAAD,IAAkB;AACnC,aAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpC,YAAI,CAACF,YAAY,CAACG,mBAAd,IAAqCH,YAAY,CAACI,IAAb,IAAqB,IAA9D,EAAoE;AAClEhB,UAAAA,MAAM,CAACiB,GAAP,CACEL,YAAY,CAACI,IAAb,CAAkBE,EADpB,EAEEC,IAAI,CAACC,SAAL,CAAeR,YAAf,CAFF,EAGE,UAAUS,GAAV,EAAeC,KAAf,EAAsB;AACpBC,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,KAAxB;AACAC,YAAAA,OAAO,CAACE,KAAR,CAAc,UAAd,EAA0BJ,GAA1B;AACD,WANH;AAQAP,UAAAA,OAAO;AACR,SAVD,MAUO;AACL,gBAAM,IAAIY,KAAJ,CAAU,eAAV,CAAN;AACD;AACF,OAdM,CAAP;AAeD,KAjBgB;AAkBjBC,IAAAA,iBAAiB,EAAGC,YAAD,IAAkB;AACnC,aAAO,IAAIf,OAAJ,CAAY,UAAUC,OAAV,EAAmBe,MAAnB,EAA2B;AAC5C,YAAI,CAACD,YAAY,CAACb,mBAAd,IAAqCa,YAAY,CAACE,MAAb,IAAuB,IAAhE,EAAsE;AACpEP,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,YAAY,CAACE,MAAvC;AACA9B,UAAAA,MAAM,CAAC+B,GAAP,CAAWH,YAAY,CAACE,MAAxB,EAAgC,UAAUE,CAAV,EAAaV,KAAb,EAAoB;AAClD,gBAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,qBAAOO,MAAM,EAAb;AACD;;AAED,mBAAOf,OAAO,CAACK,IAAI,CAACc,KAAL,CAAWX,KAAX,CAAD,CAAd;AACD,WAND;AAOD,SATD,MASO;AACL,gBAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;AACD;AACF,OAbM,CAAP;AAcD;AAjCgB;AAJwB,CAApB,CAAlB","sourcesContent":["import { InstallProvider } from \"@slack/oauth\";\nimport { createClient } from \"redis\";\n\nconst client = createClient(process.env.REDIS_URL || \"\");\n\nexport const installer = new InstallProvider({\n  clientId: process.env.SLACK_CLIENT_ID || \"\",\n  clientSecret: process.env.SLACK_CLIENT_SECRET || \"\",\n  stateSecret: \"hehe-gravel-lol\",\n  installationStore: {\n    storeInstallation: (installation) => {\n      return new Promise(function (resolve) {\n        if (!installation.isEnterpriseInstall && installation.team != null) {\n          client.set(\n            installation.team.id,\n            JSON.stringify(installation),\n            function (err, reply) {\n              console.log(\"Reply is\", reply);\n              console.error(\"Error is\", err);\n            }\n          );\n          resolve();\n        } else {\n          throw new Error(\"Not supported\");\n        }\n      });\n    },\n    fetchInstallation: (installQuery) => {\n      return new Promise(function (resolve, reject) {\n        if (!installQuery.isEnterpriseInstall && installQuery.teamId != null) {\n          console.log(\"Client get\", installQuery.teamId);\n          client.get(installQuery.teamId, function (_, reply) {\n            if (reply == null) {\n              return reject();\n            }\n\n            return resolve(JSON.parse(reply));\n          });\n        } else {\n          throw new Error(\"Not supported\");\n        }\n      });\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}