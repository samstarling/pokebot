{"ast":null,"code":"import \"reflect-metadata\";\nimport { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { installer } from \"../../lib/slack/installer\";\nimport { RESPONDERS } from \"../../lib/responders\";\nimport { createConnection } from \"typeorm\";\nimport { Pokemon, Roll } from \"../../src/entity\";\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\ncreateConnection({\n  type: \"postgres\",\n  url: process.env.DATABASE_URL,\n  entities: [Pokemon, Roll],\n  schema: \"public\",\n  synchronize: false,\n  logging: true\n}).then(async connection => {\n  const pokeRepo = connection.getRepository(Pokemon);\n  const rollRepo = connection.getRepository(Roll);\n  slackEvents.on(\"app_mention\", async event => {\n    const installData = await installer.authorize({\n      teamId: event.team,\n      isEnterpriseInstall: false,\n      enterpriseId: event.enterprise_id\n    });\n    const client = new WebClient(installData.botToken);\n    RESPONDERS.forEach(async r => {\n      const sanitizedText = event.text.toLowerCase().replace(\"â€™\", \"'\");\n\n      if (sanitizedText.includes(r.triggerPhrase.toLowerCase())) {\n        r.respond({\n          event,\n          client,\n          pokeRepo,\n          rollRepo\n        });\n      }\n    });\n  });\n}).catch(error => console.log(error));\nexport default slackEvents.requestListener();\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true\n  }\n};","map":null,"metadata":{},"sourceType":"module"}