{"ast":null,"code":"import { currentPokemonForUser, emojiFor } from \"../pokemon\";\nexport default {\n  id: \"battle\",\n  triggerPhrase: \"Battle\",\n  respond: async (event, client, prisma) => {\n    const usersPokemon = await currentPokemonForUser(prisma, event.team, event.user);\n\n    if (!usersPokemon) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> You don't have a Pokémon!`\n      });\n      return;\n    }\n\n    usersFromMessage(event.text, client).then(async rawOpponents => {\n      console.log(JSON.stringify(rawOpponents, null, 2));\n      const opponents = rawOpponents.filter(o => !o.is_bot);\n\n      if (opponents.length === 0) {\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}> You have to pick a human to battle!`\n        });\n      }\n\n      if (opponents.length > 1) {\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}> You can't battle more than one person`\n        });\n      }\n\n      const opponent = opponents[0];\n      const opponentsPokemon = await currentPokemonForUser(prisma, event.team, opponent.id);\n\n      if (!opponentsPokemon) {\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}> Sorry, <@${opponent.id}> doesn't have a Pokémon!`\n        });\n        return;\n      }\n\n      const rsp = await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: Let's battle your :${emojiFor(usersPokemon)}: ${usersPokemon.name} against <@${opponent.id}>'s :${emojiFor(opponentsPokemon)}: ${opponentsPokemon.name}`\n      });\n      await client.chat.postMessage({\n        channel: event.channel,\n        thread_ts: rsp.ts,\n        text: `You'll have to <https://pokemon-battle.herokuapp.com/|battle yourselves>, I'm not that clever yet.`\n      });\n    });\n  }\n};\n\nconst usersFromMessage = (text, client) => {\n  return Promise.all(Array.from(text.matchAll(/<@(\\w+)>/g)).map(async m => {\n    console.log(\"Fetching \", m[1]);\n    const response = await client.users.info({\n      user: m[1]\n    });\n    return response.user;\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}