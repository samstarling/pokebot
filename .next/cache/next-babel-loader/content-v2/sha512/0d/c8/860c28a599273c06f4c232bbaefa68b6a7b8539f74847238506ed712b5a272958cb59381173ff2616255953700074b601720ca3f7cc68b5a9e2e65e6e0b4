{"ast":null,"code":"import { DateTime } from \"luxon\";\nimport { emojiFor, statusFor, imageFor, renderType, assignRandomPokemon } from \"../pokemon\";\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async ({\n    event,\n    client,\n    pokeRepo,\n    rollRepo\n  }) => {\n    const today = DateTime.local();\n    const where = {\n      generation: 1\n    }; // Generation 2 Thursdays\n\n    if (today.weekday === 4) {\n      where.generation = 2;\n    } // Legendary Christmas Day\n\n\n    if (today.day === 25 && today.month === 12) {\n      where.generation = undefined;\n      where.isLegendary = true;\n    }\n\n    assignRandomPokemon(pokeRepo, rollRepo, event.team, event.user, where).then(async roll => {\n      const message = `:${emojiFor(roll.pokemon)}: It’s me, ${roll.pokemon.name}!`;\n      const firstMessage = await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${message}`,\n        icon_url: imageFor(roll.pokemon),\n        username: roll.pokemon.name\n      });\n      const status = statusFor(roll.pokemon);\n      let fields = [];\n\n      if (roll.pokemon.isLegendary) {\n        fields.push({\n          type: \"mrkdwn\",\n          text: \":sparkles: Legendary\"\n        });\n      }\n\n      fields = fields.concat([{\n        type: \"mrkdwn\",\n        text: renderType(roll.pokemon)\n      }, {\n        type: \"mrkdwn\",\n        text: `*HP*: ${roll.pokemon.hp}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Attack*: ${roll.pokemon.attack}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Defense*: ${roll.pokemon.defense}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Speed*: ${roll.pokemon.speed}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Sp. Attack*: ${roll.pokemon.specialAttack}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Sp. Defense*: ${roll.pokemon.specialDefense}`\n      }]);\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${status}`,\n        thread_ts: firstMessage.ts,\n        icon_url: `https://gravel-pokebot.herokuapp.com/oak.png`,\n        username: \"Professor Oak\",\n        blocks: [{\n          type: \"section\",\n          text: {\n            type: \"mrkdwn\",\n            text: status\n          },\n          fields,\n          accessory: {\n            type: \"image\",\n            image_url: imageFor(roll.pokemon),\n            alt_text: roll.pokemon.name\n          }\n        }]\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/assign.ts"],"names":["DateTime","emojiFor","statusFor","imageFor","renderType","assignRandomPokemon","id","triggerPhrase","respond","event","client","pokeRepo","rollRepo","today","local","where","generation","weekday","day","month","undefined","isLegendary","team","user","then","roll","message","pokemon","name","firstMessage","chat","postMessage","channel","text","icon_url","username","status","fields","push","type","concat","hp","attack","defense","speed","specialAttack","specialDefense","thread_ts","ts","blocks","accessory","image_url","alt_text"],"mappings":"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","sourcesContent":["import {\n  WebAPICallResult,\n  PlainTextElement,\n  MrkdwnElement,\n} from \"@slack/web-api\";\nimport { FindConditions } from \"typeorm\";\nimport { Pokemon } from \"../../src/entity\";\nimport { DateTime } from \"luxon\";\n\nimport { Responder, RespondParams } from \"./\";\nimport {\n  emojiFor,\n  statusFor,\n  imageFor,\n  renderType,\n  assignRandomPokemon,\n} from \"../pokemon\";\n\ntype PostMessageResult = WebAPICallResult & {\n  ts: string;\n};\n\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async ({ event, client, pokeRepo, rollRepo }: RespondParams) => {\n    const today = DateTime.local();\n\n    const where: FindConditions<Pokemon> = {\n      generation: 1,\n    };\n\n    // Generation 2 Thursdays\n    if (today.weekday === 4) {\n      where.generation = 2;\n    }\n\n    // Legendary Christmas Day\n    if (today.day === 25 && today.month === 12) {\n      where.generation = undefined;\n      where.isLegendary = true;\n    }\n\n    assignRandomPokemon(pokeRepo, rollRepo, event.team, event.user, where).then(\n      async (roll) => {\n        const message = `:${emojiFor(roll.pokemon)}: It’s me, ${\n          roll.pokemon.name\n        }!`;\n\n        const firstMessage = (await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}>: ${message}`,\n          icon_url: imageFor(roll.pokemon),\n          username: roll.pokemon.name,\n        })) as PostMessageResult;\n\n        const status = statusFor(roll.pokemon);\n\n        let fields: (PlainTextElement | MrkdwnElement)[] = [];\n\n        if (roll.pokemon.isLegendary) {\n          fields.push({\n            type: \"mrkdwn\",\n            text: \":sparkles: Legendary\",\n          });\n        }\n\n        fields = fields.concat([\n          {\n            type: \"mrkdwn\",\n            text: renderType(roll.pokemon),\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*HP*: ${roll.pokemon.hp}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Attack*: ${roll.pokemon.attack}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Defense*: ${roll.pokemon.defense}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Speed*: ${roll.pokemon.speed}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Sp. Attack*: ${roll.pokemon.specialAttack}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Sp. Defense*: ${roll.pokemon.specialDefense}`,\n          },\n        ]);\n\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}>: ${status}`,\n          thread_ts: firstMessage.ts,\n          icon_url: `https://gravel-pokebot.herokuapp.com/oak.png`,\n          username: \"Professor Oak\",\n          blocks: [\n            {\n              type: \"section\",\n              text: {\n                type: \"mrkdwn\",\n                text: status,\n              },\n              fields,\n              accessory: {\n                type: \"image\",\n                image_url: imageFor(roll.pokemon),\n                alt_text: roll.pokemon.name,\n              },\n            },\n          ],\n        });\n      }\n    );\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}