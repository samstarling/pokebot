{"ast":null,"code":"import { emojiFor } from \"../pokemon\";\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async ({\n    event,\n    client,\n    rollRepo\n  }) => {\n    await rollRepo.find({\n      where: {\n        userId: event.user\n      },\n      relations: [\"pokemon\"],\n      order: {\n        createdAt: \"DESC\"\n      },\n      take: 5\n    }).then(async rolls => {\n      const text = rolls.map(r => descriptionFor(r.pokemon)).join(\", \");\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Your most recent Pokémon were ${text}`\n      });\n    });\n  }\n};\n\nconst descriptionFor = p => `:${emojiFor(p)}: ${p.name}`;","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/history.ts"],"names":["emojiFor","id","triggerPhrase","respond","event","client","rollRepo","find","where","userId","user","relations","order","createdAt","take","then","rolls","text","map","r","descriptionFor","pokemon","join","chat","postMessage","channel","p","name"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AAKA,eAAe;AACbC,EAAAA,EAAE,EAAE,SADS;AAEbC,EAAAA,aAAa,EAAE,SAFF;AAGbC,EAAAA,OAAO,EAAE,OAAO;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,GAAP,KAAsD;AAC7D,UAAMA,QAAQ,CACXC,IADG,CACE;AACJC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEL,KAAK,CAACM;AAAhB,OADH;AAEJC,MAAAA,SAAS,EAAE,CAAC,SAAD,CAFP;AAGJC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAHH;AAIJC,MAAAA,IAAI,EAAE;AAJF,KADF,EAOHC,IAPG,CAOE,MAAOC,KAAP,IAAiB;AACrB,YAAMC,IAAI,GAAGD,KAAK,CAACE,GAAN,CAAWC,CAAD,IAAOC,cAAc,CAACD,CAAC,CAACE,OAAH,CAA/B,EAA4CC,IAA5C,CAAiD,IAAjD,CAAb;AACA,YAAMjB,MAAM,CAACkB,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,QAAAA,OAAO,EAAErB,KAAK,CAACqB,OADa;AAE5BR,QAAAA,IAAI,EAAG,KAAIb,KAAK,CAACM,IAAK,mCAAkCO,IAAK;AAFjC,OAAxB,CAAN;AAID,KAbG,CAAN;AAcD;AAlBY,CAAf;;AAqBA,MAAMG,cAAc,GAAIM,CAAD,IAAyB,IAAG1B,QAAQ,CAAC0B,CAAD,CAAI,KAAIA,CAAC,CAACC,IAAK,EAA1E","sourcesContent":["import { emojiFor } from \"../pokemon\";\nimport { Responder, RespondParams } from \"./\";\n\nimport { Pokemon } from \"../../src/entity/Pokemon\";\n\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async ({ event, client, rollRepo }: RespondParams) => {\n    await rollRepo\n      .find({\n        where: { userId: event.user },\n        relations: [\"pokemon\"],\n        order: { createdAt: \"DESC\" },\n        take: 5,\n      })\n      .then(async (rolls) => {\n        const text = rolls.map((r) => descriptionFor(r.pokemon)).join(\", \");\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}> Your most recent Pokémon were ${text}`,\n        });\n      });\n  },\n} as Responder;\n\nconst descriptionFor = (p: Pokemon): string => `:${emojiFor(p)}: ${p.name}`;\n"]},"metadata":{},"sourceType":"module"}