{"ast":null,"code":"import { Roll } from \"../../src/entity/Pokemon\";\nexport const emojiFor = poke => {\n  if (poke.number > 151) {\n    return \"sparkles\";\n  }\n\n  return poke.emoji || poke.name.toLowerCase();\n};\nexport const pickOne = items => {\n  if (items.length === 0) throw new Error(\"Must provide a non-empty list\");\n  return items[Math.floor(Math.random() * items.length)];\n};\nconst IMAGE_PREFIX = \"https://cdn.traction.one/pokedex/pokemon\";\nexport const imageFor = poke => {\n  if (poke.number === 492) {\n    return `${IMAGE_PREFIX}/${poke.number}-land.png`;\n  }\n\n  return `${IMAGE_PREFIX}/${poke.number}.png`;\n};\nexport const assignRandomPokemon = async (repo, rollRepo, teamId, userId, where) => {\n  return repo.find({\n    where,\n    relations: [\"roll\"]\n  }).then(pokes => pickOne(pokes)).then(poke => assignPokemonToUser(rollRepo, teamId, userId, poke));\n};\nexport const assignPokemonToUser = async (rollRepo, teamId, userId, pokemon) => {\n  const r = new Roll();\n  r.teamId = teamId;\n  r.userId = userId;\n  r.pokemon = pokemon;\n  return rollRepo.save(r);\n};\nexport const currentPokemonForUser = async (repo, teamId, userId) => {\n  const rolls = await repo.find({\n    where: {\n      teamId,\n      userId\n    },\n    relations: [\"pokemon\"],\n    order: {} // TODO: OrderBy,\n\n  });\n\n  if (rolls.length === 0) {\n    return null;\n  }\n\n  return rolls[0].pokemon;\n};\nexport const renderType = p => {\n  if (p.secondaryType) {\n    return `:pokemon_type_${p.primaryType}: ${camelCase(p.primaryType)} / :pokemon_type_${p.secondaryType}: ${camelCase(p.secondaryType)}`;\n  }\n\n  return `:pokemon_type_${p.primaryType}: ${camelCase(p.primaryType)}`;\n};\n\nconst camelCase = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const statusFor = pokemon => {\n  const {\n    name,\n    classification\n  } = pokemon;\n  return pickOne([`It would seem your *${name}* (${classification}) is doing OK, thanks for checking in.`, `It would seem your *${name}* (${classification}) is great – but a little hungry.`, `It would seem your *${name}* (${classification}) is annoyed that you forgot their birthday last week.`, `Your *${name}* (${classification}) is good.`, `Your *${name}* (${classification}) is strong.`, `Your *${name}* (${classification}) is flourishing.`, `Your *${name}* (${classification}) is thriving.`, `Your *${name}* (${classification}) is in good health.`, `Your *${name}* (${classification}) is bright-eyed.`, `Your *${name}* (${classification}) is wholesome.`, `Your *${name}* (${classification}) is fresh.`, `Your *${name}* (${classification}) is hearty.`, `Your *${name}* (${classification}) is prosperous.`, `Your *${name}* (${classification}) is solid as a rock.`, `Your *${name}* (${classification}) is doing well.`, `Your *${name}* (${classification}) is happy and healthy.`, `Your *${name}* (${classification}) is looking great today.`, `Your *${name}* (${classification}) thinks you look nice today.`, `Your *${name}* (${classification}) thinks you're doing a great job.`, `Your *${name}* (${classification}) is says they're lucky to have you.`, `Your *${name}* (${classification}) is just glad to be here.`, `Your *${name}* (${classification}) loves you.`, `Your *${name}* (${classification}) is alright.`, `Your *${name}* (${classification}) is... still a piece of garbage.`, `Your *${name}* (${classification}) is great.`, `Your *${name}* (${classification}) is excellent.`, `Your *${name}* (${classification}) is lovely.`, `Your *${name}* (${classification}) is completing mandatory training – Fs in chat please.`, `Your *${name}* (${classification}) has been better, actually.`, `Your *${name}* (${classification}) has the sniffles.`, `Your *${name}* (${classification}) is having a bit of a rough day.`, `Your *${name}* (${classification}) would like a hug.`, `Your *${name}* (${classification}) is suffering from the longer term effects of COVID-19.`, `Your *${name}* (${classification}) could do with a holiday.`, `Your *${name}* (${classification}) is looking forward to Christmas, which is definitely something that Pokémon celebrate.`, `Shit, that's a hench *${name}* (${classification}).`, `Goodness, what a large *${name}* (${classification}).`, `Looks like your *${name}* (${classification}) is happy.`, `Looks like your *${name}* (${classification}) is enjoying themselves.`, `Looks like your *${name}* (${classification}) is doing well.`, `Looks like your *${name}* (${classification}) is doing great.`, `Looks like your *${name}* (${classification}) is having a great time.`, `Looks like your *${name}* (${classification}) is having a well-earned break.`, `Your *${name}* (${classification}) is looking healthy.`, `Your *${name}* (${classification}) is looking happy.`, `Your *${name}* (${classification}) is well.`, `Your *${name}* (${classification}) is just great.`, `Your *${name}* (${classification}) is swell.`, `Your *${name}* (${classification}) is doing well.`, `Your *${name}* (${classification}) is doing OK.`, `Your *${name}* (${classification}) is doing great.`, `Your *${name}* (${classification}) is just fine.`]);\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/pokemon/index.ts"],"names":["Roll","emojiFor","poke","number","emoji","name","toLowerCase","pickOne","items","length","Error","Math","floor","random","IMAGE_PREFIX","imageFor","assignRandomPokemon","repo","rollRepo","teamId","userId","where","find","relations","then","pokes","assignPokemonToUser","pokemon","r","save","currentPokemonForUser","rolls","order","renderType","p","secondaryType","primaryType","camelCase","str","charAt","toUpperCase","slice","statusFor","classification"],"mappings":"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","sourcesContent":["import { FindConditions, Repository } from \"typeorm\";\nimport { Pokemon, Roll } from \"../../src/entity/Pokemon\";\n\nexport const emojiFor = (poke: Pokemon): string => {\n  if (poke.number > 151) {\n    return \"sparkles\";\n  }\n\n  return poke.emoji || poke.name.toLowerCase();\n};\n\nexport const pickOne = <T>(items: T[]): T => {\n  if (items.length === 0) throw new Error(\"Must provide a non-empty list\");\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nconst IMAGE_PREFIX = \"https://cdn.traction.one/pokedex/pokemon\";\n\nexport const imageFor = (poke: Pokemon): string => {\n  if (poke.number === 492) {\n    return `${IMAGE_PREFIX}/${poke.number}-land.png`;\n  }\n\n  return `${IMAGE_PREFIX}/${poke.number}.png`;\n};\n\nexport const assignRandomPokemon = async (\n  repo: Repository<Pokemon>,\n  rollRepo: Repository<Roll>,\n  teamId: string,\n  userId: string,\n  where: FindConditions<Pokemon>\n): Promise<Roll> => {\n  return repo\n    .find({ where, relations: [\"roll\"] })\n    .then((pokes) => pickOne(pokes))\n    .then((poke) => assignPokemonToUser(rollRepo, teamId, userId, poke));\n};\n\nexport const assignPokemonToUser = async (\n  rollRepo: Repository<Roll>,\n  teamId: string,\n  userId: string,\n  pokemon: Pokemon\n): Promise<Roll> => {\n  const r = new Roll();\n  r.teamId = teamId;\n  r.userId = userId;\n  r.pokemon = pokemon;\n  return rollRepo.save(r);\n};\n\nexport const currentPokemonForUser = async (\n  repo: Repository<Roll>,\n  teamId: string,\n  userId: string\n): Promise<Pokemon> => {\n  const rolls = await repo.find({\n    where: { teamId, userId },\n    relations: [\"pokemon\"],\n    order: {}, // TODO: OrderBy,\n  });\n\n  if (rolls.length === 0) {\n    return null;\n  }\n\n  return rolls[0].pokemon;\n};\n\nexport const renderType = (p: Pokemon): string => {\n  if (p.secondaryType) {\n    return `:pokemon_type_${p.primaryType}: ${camelCase(\n      p.primaryType\n    )} / :pokemon_type_${p.secondaryType}: ${camelCase(p.secondaryType)}`;\n  }\n\n  return `:pokemon_type_${p.primaryType}: ${camelCase(p.primaryType)}`;\n};\n\nconst camelCase = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const statusFor = (pokemon: Pokemon): string => {\n  const { name, classification } = pokemon;\n  return pickOne([\n    `It would seem your *${name}* (${classification}) is doing OK, thanks for checking in.`,\n    `It would seem your *${name}* (${classification}) is great – but a little hungry.`,\n    `It would seem your *${name}* (${classification}) is annoyed that you forgot their birthday last week.`,\n    `Your *${name}* (${classification}) is good.`,\n    `Your *${name}* (${classification}) is strong.`,\n    `Your *${name}* (${classification}) is flourishing.`,\n    `Your *${name}* (${classification}) is thriving.`,\n    `Your *${name}* (${classification}) is in good health.`,\n    `Your *${name}* (${classification}) is bright-eyed.`,\n    `Your *${name}* (${classification}) is wholesome.`,\n    `Your *${name}* (${classification}) is fresh.`,\n    `Your *${name}* (${classification}) is hearty.`,\n    `Your *${name}* (${classification}) is prosperous.`,\n    `Your *${name}* (${classification}) is solid as a rock.`,\n    `Your *${name}* (${classification}) is doing well.`,\n    `Your *${name}* (${classification}) is happy and healthy.`,\n    `Your *${name}* (${classification}) is looking great today.`,\n    `Your *${name}* (${classification}) thinks you look nice today.`,\n    `Your *${name}* (${classification}) thinks you're doing a great job.`,\n    `Your *${name}* (${classification}) is says they're lucky to have you.`,\n    `Your *${name}* (${classification}) is just glad to be here.`,\n    `Your *${name}* (${classification}) loves you.`,\n    `Your *${name}* (${classification}) is alright.`,\n    `Your *${name}* (${classification}) is... still a piece of garbage.`,\n    `Your *${name}* (${classification}) is great.`,\n    `Your *${name}* (${classification}) is excellent.`,\n    `Your *${name}* (${classification}) is lovely.`,\n    `Your *${name}* (${classification}) is completing mandatory training – Fs in chat please.`,\n    `Your *${name}* (${classification}) has been better, actually.`,\n    `Your *${name}* (${classification}) has the sniffles.`,\n    `Your *${name}* (${classification}) is having a bit of a rough day.`,\n    `Your *${name}* (${classification}) would like a hug.`,\n    `Your *${name}* (${classification}) is suffering from the longer term effects of COVID-19.`,\n    `Your *${name}* (${classification}) could do with a holiday.`,\n    `Your *${name}* (${classification}) is looking forward to Christmas, which is definitely something that Pokémon celebrate.`,\n    `Shit, that's a hench *${name}* (${classification}).`,\n    `Goodness, what a large *${name}* (${classification}).`,\n    `Looks like your *${name}* (${classification}) is happy.`,\n    `Looks like your *${name}* (${classification}) is enjoying themselves.`,\n    `Looks like your *${name}* (${classification}) is doing well.`,\n    `Looks like your *${name}* (${classification}) is doing great.`,\n    `Looks like your *${name}* (${classification}) is having a great time.`,\n    `Looks like your *${name}* (${classification}) is having a well-earned break.`,\n    `Your *${name}* (${classification}) is looking healthy.`,\n    `Your *${name}* (${classification}) is looking happy.`,\n    `Your *${name}* (${classification}) is well.`,\n    `Your *${name}* (${classification}) is just great.`,\n    `Your *${name}* (${classification}) is swell.`,\n    `Your *${name}* (${classification}) is doing well.`,\n    `Your *${name}* (${classification}) is doing OK.`,\n    `Your *${name}* (${classification}) is doing great.`,\n    `Your *${name}* (${classification}) is just fine.`,\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}