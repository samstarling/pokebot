{"ast":null,"code":"const EMOJI = {\n  1: \"f\"\n};\nexport const emojiFor = poke => {\n  if (poke.number > 151) {\n    return \"sparkles\";\n  }\n\n  return EMOJI[poke.number] || poke.name.toLowerCase();\n};\nexport const pickOne = items => {\n  return items[Math.floor(Math.random() * items.length)];\n};\nexport const assignRandomPokemon = async (prisma, teamId, userId, generation) => {\n  return await prisma.pokemon.findMany({\n    where: {\n      generation\n    }\n  }).then(pokes => assignPokemonToUser(prisma, teamId, userId, pickOne(pokes).number));\n};\nexport const assignPokemonToUser = async (prisma, teamId, userId, number) => {\n  return prisma.roll.create({\n    data: {\n      teamId: teamId,\n      userId: userId,\n      Pokemon: {\n        connect: {\n          number\n        }\n      }\n    },\n    include: {\n      Pokemon: true\n    }\n  });\n};\nexport const currentPokemonForUser = async (prisma, teamId, userId) => {\n  const rolls = await prisma.roll.findMany({\n    where: {\n      teamId,\n      userId\n    },\n    orderBy: {\n      createdAt: \"desc\"\n    },\n    take: 1,\n    include: {\n      Pokemon: true\n    }\n  });\n\n  if (rolls.length === 0) {\n    return null;\n  }\n\n  return rolls[0].Pokemon;\n};\nexport const renderType = p => {\n  if (p.secondaryType) {\n    return `:pokemon_type_${p.primaryType}: ${camelCase(p.primaryType)} / :pokemon_type_${p.secondaryType}: ${camelCase(p.secondaryType)}`;\n  }\n\n  return `:pokemon_type_${p.primaryType}: ${camelCase(p.primaryType)}`;\n};\n\nconst camelCase = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const statusFor = pokemon => {\n  const {\n    name,\n    classification\n  } = pokemon;\n  return pickOne([`*${name}* (${classification}) is doing OK, thanks for checking in.`, `*${name}* (${classification}) is great – but a little hungry.`, `*${name}* (${classification}) is annoyed that you forgot their birthday last week.`, `*${name}* (${classification}) is good.`, `*${name}* (${classification}) is doing well.`, `*${name}* (${classification}) is happy and healthy.`, `*${name}* (${classification}) is looking great today.`, `*${name}* (${classification}) thinks you look nice today.`, `*${name}* (${classification}) says your doing a great job.`, `*${name}* (${classification}) is says they're lucky to have you.`, `*${name}* (${classification}) is just glad to be here.`, `*${name}* (${classification}) loves you.`, `*${name}* (${classification}) is alright.`, `*${name}* (${classification}) is great.`, `*${name}* (${classification}) is excellent.`, `*${name}* (${classification}) is lovely.`, `*${name}* (${classification}) is completing mandatory training – Fs in chat please.`, `*${name}* (${classification}) has been better, actually.`, `*${name}* (${classification}) has the sniffles.`, `*${name}* (${classification}) is doing well.`, `*${name}* (${classification}) is doing OK.`, `*${name}* (${classification}) is just fine.`, `*${name}* (${classification}) is having a bit of a rough day.`, `*${name}* (${classification}) would like a hug.`, `*${name}* (${classification}) could do with a holiday.`, `*${name}* (${classification}) is looking forward to Christmas, which is definitely something that Pokémon celebrate.`, `Shit, that's a hench *${name}* (${classification}).`, `Goodness, what a large *${name}* (${classification}).`, `Looks like *${name}* (${classification}) is happy.`, `Looks like *${name}* (${classification}) is having a great time.`, `Looks like *${name}* (${classification}) is having a well-earned break.`, `Your *${name}* (${classification}) is looking healthy.`, `Your *${name}* (${classification}) is looking happy.`, `Your *${name}* (${classification}) is well.`, `Your *${name}* (${classification}) is just great.`, `Your *${name}* (${classification}) is swell.`]);\n};","map":null,"metadata":{},"sourceType":"module"}