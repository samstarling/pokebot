{"ast":null,"code":"export default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (event, client, prisma) => {\n    await prisma.roll.findMany({\n      where: {\n        userId: event.user\n      },\n      include: {\n        Pokemon: true\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      }\n    }).then(async (rolls) => await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> Your most recent Pokémon were ${rolls.map(r => r.Pokemon.name).join(\", \")}`\n    }));\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/history.ts"],"names":["id","triggerPhrase","respond","event","client","prisma","roll","findMany","where","userId","user","include","Pokemon","orderBy","createdAt","then","rolls","chat","postMessage","channel","text","map","r","name","join"],"mappings":"AAOA,eAAe;AACbA,EAAAA,EAAE,EAAE,SADS;AAEbC,EAAAA,aAAa,EAAE,SAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMA,MAAM,CAACC,IAAP,CACHC,QADG,CACM;AACRC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEN,KAAK,CAACO;AAAhB,OADC;AAERC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFD;AAGRC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb;AAHD,KADN,EAMHC,IANG,CAOF,OAAOC,KAAP,KACE,MAAMZ,MAAM,CAACa,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,MAAAA,OAAO,EAAEhB,KAAK,CAACgB,OADa;AAE5BC,MAAAA,IAAI,EAAG,KAAIjB,KAAK,CAACO,IAAK,mCAAkCM,KAAK,CAC1DK,GADqD,CAChDC,CAAD,IAAOA,CAAC,CAACV,OAAF,CAAUW,IADgC,EAErDC,IAFqD,CAEhD,IAFgD,CAE1C;AAJc,KAAxB,CARN,CAAN;AAeD;AAvBY,CAAf","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { emojiFor } from \"../pokemon\";\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\n\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    await prisma.roll\n      .findMany({\n        where: { userId: event.user },\n        include: { Pokemon: true },\n        orderBy: { createdAt: \"desc\" },\n      })\n      .then(\n        async (rolls) =>\n          await client.chat.postMessage({\n            channel: event.channel,\n            text: `<@${event.user}> Your most recent Pokémon were ${rolls\n              .map((r) => r.Pokemon.name)\n              .join(\", \")}`,\n          })\n      );\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}