{"ast":null,"code":"import { emojiFor } from \"../pokemon\";\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (event, client, prisma) => {\n    await prisma.roll.findMany({\n      where: {\n        userId: event.user\n      },\n      include: {\n        Pokemon: true\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      }\n    }).then(async rolls => {\n      const last = rolls.pop();\n      const text = rolls.map(descriptionFor).join(\", \") + \" and \" + descriptionFor(last);\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Your most recent Pokémon were ${text}`\n      });\n    });\n  }\n};\n\nconst descriptionFor = r => `:${emojiFor(r.Pokemon)}: ${r.Pokemon.name}`;","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/history.ts"],"names":["emojiFor","id","triggerPhrase","respond","event","client","prisma","roll","findMany","where","userId","user","include","Pokemon","orderBy","createdAt","then","rolls","last","pop","text","map","descriptionFor","join","chat","postMessage","channel","r","name"],"mappings":"AAGA,SAASA,QAAT,QAA+B,YAA/B;AAIA,eAAe;AACbC,EAAAA,EAAE,EAAE,SADS;AAEbC,EAAAA,aAAa,EAAE,SAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMA,MAAM,CAACC,IAAP,CACHC,QADG,CACM;AACRC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEN,KAAK,CAACO;AAAhB,OADC;AAERC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFD;AAGRC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb;AAHD,KADN,EAMHC,IANG,CAME,MAAOC,KAAP,IAAiB;AACrB,YAAMC,IAAI,GAAGD,KAAK,CAACE,GAAN,EAAb;AACA,YAAMC,IAAI,GACRH,KAAK,CAACI,GAAN,CAAUC,cAAV,EAA0BC,IAA1B,CAA+B,IAA/B,IAAuC,OAAvC,GAAiDD,cAAc,CAACJ,IAAD,CADjE;AAGA,YAAMb,MAAM,CAACmB,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,QAAAA,OAAO,EAAEtB,KAAK,CAACsB,OADa;AAE5BN,QAAAA,IAAI,EAAG,KAAIhB,KAAK,CAACO,IAAK,mCAAkCS,IAAK;AAFjC,OAAxB,CAAN;AAID,KAfG,CAAN;AAgBD;AAxBY,CAAf;;AA2BA,MAAME,cAAc,GAAIK,CAAD,IACpB,IAAG3B,QAAQ,CAAC2B,CAAC,CAACd,OAAH,CAAY,KAAIc,CAAC,CAACd,OAAF,CAAUe,IAAK,EAD7C","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { emojiFor, Roll } from \"../pokemon\";\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\n\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    await prisma.roll\n      .findMany({\n        where: { userId: event.user },\n        include: { Pokemon: true },\n        orderBy: { createdAt: \"desc\" },\n      })\n      .then(async (rolls) => {\n        const last = rolls.pop();\n        const text =\n          rolls.map(descriptionFor).join(\", \") + \" and \" + descriptionFor(last);\n\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}> Your most recent Pokémon were ${text}`,\n        });\n      });\n  },\n} as Responder;\n\nconst descriptionFor = (r: Roll): string =>\n  `:${emojiFor(r.Pokemon)}: ${r.Pokemon.name}`;\n"]},"metadata":{},"sourceType":"module"}