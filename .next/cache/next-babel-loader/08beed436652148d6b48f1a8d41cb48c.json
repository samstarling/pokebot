{"ast":null,"code":"import \"reflect-metadata\";\nimport { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { createConnection } from \"typeorm\";\nimport { Roll } from \"../../src/entity/Roll\";\nimport { installer } from \"../../lib/slack/installer\";\nimport { POKEMON } from \"../../lib/pokemon\";\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\nconst THANK_YOUS = [\"You're very welcome\", \"No problem\", \"No worries mate\", \"Any time\"];\n\nconst pickOne = items => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nconst pickPokemon = async event => {\n  const installData = await installer.authorize({\n    teamId: event.team\n  });\n  const web = new WebClient(installData.botToken);\n\n  if (event.text.toLowerCase().includes(\"Who’s that Pokémon?\".toLowerCase()) || event.text.toLowerCase().includes(\"Who's that Pokémon?\".toLowerCase())) {\n    var result = pickOne(POKEMON);\n    createConnection({\n      type: \"postgres\",\n      url: process.env.DATABASE_URL,\n      entities: [Roll],\n      synchronize: true,\n      logging: false\n    }).then(async connection => {\n      let roll = new Roll();\n      roll.teamId = event.team;\n      roll.userId = event.user;\n      roll.pokemonNumber = result.id;\n      await connection.manager.save(roll);\n      console.log(\"Roll has been saved\");\n    }).catch(error => console.log(error));\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${result.name.english.toLowerCase()}: It’s ${result.name.english}!`\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"thanks\") || event.text.toLowerCase().includes(\"thank you\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> ${pickOne(THANK_YOUS)}`\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"reroll\")) {\n    if (new Date().getDay() == 5) {\n      var _result$emoji;\n\n      var result = pickOne(POKEMON);\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: :${(_result$emoji = result.emoji) !== null && _result$emoji !== void 0 ? _result$emoji : result.name.english.toLowerCase()}: It’s ${result.name.english}!`\n      });\n    } else {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Sorry, only on a Friday`\n      });\n    }\n  }\n\n  if (event.text.toLowerCase().includes(\"help\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> There is no help, just roll a damn Pokémon already`\n    });\n  }\n};\n\nslackEvents.on(\"app_mention\", pickPokemon);\nexport default slackEvents.requestListener();\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/pages/api/event.ts"],"names":["createEventAdapter","WebClient","createConnection","Roll","installer","POKEMON","slackEvents","process","env","SLACK_SIGNING_SECRET","THANK_YOUS","pickOne","items","Math","floor","random","length","pickPokemon","event","installData","authorize","teamId","team","web","botToken","text","toLowerCase","includes","result","type","url","DATABASE_URL","entities","synchronize","logging","then","connection","roll","userId","user","pokemonNumber","id","manager","save","console","log","catch","error","chat","postMessage","channel","name","english","Date","getDay","emoji","on","requestListener","config","api","bodyParser","externalResolver"],"mappings":"AAAA,OAAO,kBAAP;AAEA,SAASA,kBAAT,QAAmC,mBAAnC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AAEA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,MAAMC,WAAW,GAAGN,kBAAkB,CAACO,OAAO,CAACC,GAAR,CAAYC,oBAAZ,IAAoC,EAArC,CAAtC;AAEA,MAAMC,UAAU,GAAG,CACjB,qBADiB,EAEjB,YAFiB,EAGjB,iBAHiB,EAIjB,UAJiB,CAAnB;;AAeA,MAAMC,OAAO,GAAOC,KAAJ,IAAsB;AACpC,SAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACI,MAAjC,CAAD,CAAZ;AACD,CAFD;;AAIA,MAAMC,WAAW,GAAG,MAAOC,KAAP,IAA+B;AACjD,QAAMC,WAAW,GAAG,MAAMf,SAAS,CAACgB,SAAV,CAAoB;AAAEC,IAAAA,MAAM,EAAEH,KAAK,CAACI;AAAhB,GAApB,CAA1B;AACA,QAAMC,GAAG,GAAG,IAAItB,SAAJ,CAAckB,WAAW,CAACK,QAA1B,CAAZ;;AAEA,MACEN,KAAK,CAACO,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC,sBAAsBD,WAAtB,EAAlC,KACAR,KAAK,CAACO,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC,sBAAsBD,WAAtB,EAAlC,CAFF,EAGE;AACA,QAAIE,MAAM,GAAGjB,OAAO,CAACN,OAAD,CAApB;AAEAH,IAAAA,gBAAgB,CAAC;AACf2B,MAAAA,IAAI,EAAE,UADS;AAEfC,MAAAA,GAAG,EAAEvB,OAAO,CAACC,GAAR,CAAYuB,YAFF;AAGfC,MAAAA,QAAQ,EAAE,CAAC7B,IAAD,CAHK;AAIf8B,MAAAA,WAAW,EAAE,IAJE;AAKfC,MAAAA,OAAO,EAAE;AALM,KAAD,CAAhB,CAOGC,IAPH,CAOQ,MAAOC,UAAP,IAAsB;AAC1B,UAAIC,IAAI,GAAG,IAAIlC,IAAJ,EAAX;AACAkC,MAAAA,IAAI,CAAChB,MAAL,GAAcH,KAAK,CAACI,IAApB;AACAe,MAAAA,IAAI,CAACC,MAAL,GAAcpB,KAAK,CAACqB,IAApB;AACAF,MAAAA,IAAI,CAACG,aAAL,GAAqBZ,MAAM,CAACa,EAA5B;AACA,YAAML,UAAU,CAACM,OAAX,CAAmBC,IAAnB,CAAwBN,IAAxB,CAAN;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,KAdH,EAeGC,KAfH,CAeUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAfpB;AAiBA,UAAMxB,GAAG,CAACyB,IAAJ,CAASC,WAAT,CAAqB;AACzBC,MAAAA,OAAO,EAAEhC,KAAK,CAACgC,OADU;AAEzBzB,MAAAA,IAAI,EAAG,KAAIP,KAAK,CAACqB,IAAK,OAAMX,MAAM,CAACuB,IAAP,CAAYC,OAAZ,CAAoB1B,WAApB,EAAkC,UAC5DE,MAAM,CAACuB,IAAP,CAAYC,OACb;AAJwB,KAArB,CAAN;AAMD;;AAED,MACElC,KAAK,CAACO,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC,QAAlC,KACAT,KAAK,CAACO,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC,WAAlC,CAFF,EAGE;AACA,UAAMJ,GAAG,CAACyB,IAAJ,CAASC,WAAT,CAAqB;AACzBC,MAAAA,OAAO,EAAEhC,KAAK,CAACgC,OADU;AAEzBzB,MAAAA,IAAI,EAAG,KAAIP,KAAK,CAACqB,IAAK,KAAI5B,OAAO,CAACD,UAAD,CAAa;AAFrB,KAArB,CAAN;AAID;;AAED,MAAIQ,KAAK,CAACO,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC,QAAlC,CAAJ,EAAiD;AAC/C,QAAI,IAAI0B,IAAJ,GAAWC,MAAX,MAAuB,CAA3B,EAA8B;AAAA;;AAC5B,UAAI1B,MAAM,GAAGjB,OAAO,CAACN,OAAD,CAApB;AACA,YAAMkB,GAAG,CAACyB,IAAJ,CAASC,WAAT,CAAqB;AACzBC,QAAAA,OAAO,EAAEhC,KAAK,CAACgC,OADU;AAEzBzB,QAAAA,IAAI,EAAG,KAAIP,KAAK,CAACqB,IAAK,OAAhB,iBACJX,MAAM,CAAC2B,KADH,yDACY3B,MAAM,CAACuB,IAAP,CAAYC,OAAZ,CAAoB1B,WAApB,EACjB,UAASE,MAAM,CAACuB,IAAP,CAAYC,OAAQ;AAJL,OAArB,CAAN;AAMD,KARD,MAQO;AACL,YAAM7B,GAAG,CAACyB,IAAJ,CAASC,WAAT,CAAqB;AACzBC,QAAAA,OAAO,EAAEhC,KAAK,CAACgC,OADU;AAEzBzB,QAAAA,IAAI,EAAG,KAAIP,KAAK,CAACqB,IAAK;AAFG,OAArB,CAAN;AAID;AACF;;AAED,MAAIrB,KAAK,CAACO,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC,MAAlC,CAAJ,EAA+C;AAC7C,UAAMJ,GAAG,CAACyB,IAAJ,CAASC,WAAT,CAAqB;AACzBC,MAAAA,OAAO,EAAEhC,KAAK,CAACgC,OADU;AAEzBzB,MAAAA,IAAI,EAAG,KAAIP,KAAK,CAACqB,IAAK;AAFG,KAArB,CAAN;AAID;AACF,CApED;;AAsEAjC,WAAW,CAACkD,EAAZ,CAAe,aAAf,EAA8BvC,WAA9B;AAEA,eAAeX,WAAW,CAACmD,eAAZ,EAAf;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE,KADT;AAEHC,IAAAA,gBAAgB,EAAE;AAFf;AADe,CAAf","sourcesContent":["import \"reflect-metadata\";\n\nimport { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { createConnection } from \"typeorm\";\n\nimport { Roll } from \"../../src/entity/Roll\";\nimport { installer } from \"../../lib/slack/installer\";\nimport { POKEMON } from \"../../lib/pokemon\";\n\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\n\nconst THANK_YOUS = [\n  \"You're very welcome\",\n  \"No problem\",\n  \"No worries mate\",\n  \"Any time\",\n];\n\ntype MentionEvent = {\n  channel: string;\n  text: string;\n  user: string;\n  team: string;\n  enterprise_id: string;\n};\n\nconst pickOne = <T>(items: T[]): T => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nconst pickPokemon = async (event: MentionEvent) => {\n  const installData = await installer.authorize({ teamId: event.team });\n  const web = new WebClient(installData.botToken);\n\n  if (\n    event.text.toLowerCase().includes(\"Who’s that Pokémon?\".toLowerCase()) ||\n    event.text.toLowerCase().includes(\"Who's that Pokémon?\".toLowerCase())\n  ) {\n    var result = pickOne(POKEMON);\n\n    createConnection({\n      type: \"postgres\",\n      url: process.env.DATABASE_URL,\n      entities: [Roll],\n      synchronize: true,\n      logging: false,\n    })\n      .then(async (connection) => {\n        let roll = new Roll();\n        roll.teamId = event.team;\n        roll.userId = event.user;\n        roll.pokemonNumber = result.id;\n        await connection.manager.save(roll);\n        console.log(\"Roll has been saved\");\n      })\n      .catch((error) => console.log(error));\n\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${result.name.english.toLowerCase()}: It’s ${\n        result.name.english\n      }!`,\n    });\n  }\n\n  if (\n    event.text.toLowerCase().includes(\"thanks\") ||\n    event.text.toLowerCase().includes(\"thank you\")\n  ) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> ${pickOne(THANK_YOUS)}`,\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"reroll\")) {\n    if (new Date().getDay() == 5) {\n      var result = pickOne(POKEMON);\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: :${\n          result.emoji ?? result.name.english.toLowerCase()\n        }: It’s ${result.name.english}!`,\n      });\n    } else {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Sorry, only on a Friday`,\n      });\n    }\n  }\n\n  if (event.text.toLowerCase().includes(\"help\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> There is no help, just roll a damn Pokémon already`,\n    });\n  }\n};\n\nslackEvents.on(\"app_mention\", pickPokemon);\n\nexport default slackEvents.requestListener();\n\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}