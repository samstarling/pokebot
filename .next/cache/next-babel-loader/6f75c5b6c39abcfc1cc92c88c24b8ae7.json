{"ast":null,"code":"import { GEN_ONE_POKEMON, emojiFor, pickOne } from \"../pokemon\";\n\nconst statusFor = pokemon => {\n  const name = pokemon.name.english;\n  return pickOne([`${name} is doing OK, thanks for checking in.`, `${name} is great – but a little hungry.`, `${name} is annoyed that you forgot their birthday last week.`, `${name} is good.`, `${name} is alright.`, `${name} is great.`, `${name} has been better, actually.`, `${name} has the sniffles.`, `${name} is doing well.`, `${name} is doing OK.`, `${name} is just fine.`, `${name} is having a rough day.`, `${name} would like a hug.`, `${name} could use.`, `Looks like ${name} is happy.`, `Your ${name} is looking healthy.`, `Your ${name} is well.`, `Your ${name} is just great.`, `Your ${name} is swell.`]);\n};\n\nexport default {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (event, client, prisma) => {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const pokemon = GEN_ONE_POKEMON[roll.pokemonNumber - 1];\n    const emoji = emojiFor(pokemon);\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emoji}: ${pokemon.name.english}`,\n      blocks: [{\n        type: \"header\",\n        text: {\n          type: \"plain_text\",\n          text: `It's ${pokemon.name.english}!`\n        }\n      }, {\n        type: \"section\",\n        text: {\n          type: \"mrkdwn\",\n          text: statusFor(pokemon)\n        },\n        fields: [{\n          type: \"mrkdwn\",\n          text: \"*HP*\"\n        }, {\n          type: \"plain_text\",\n          text: `${pokemon.base.HP}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Attack*\"\n        }, {\n          type: \"plain_text\",\n          text: `${pokemon.base.Attack}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Defense*\"\n        }, {\n          type: \"plain_text\",\n          text: `${pokemon.base.Defense}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Speed*\"\n        }, {\n          type: \"plain_text\",\n          text: `${pokemon.base.Speed}`\n        }],\n        accessory: {\n          type: \"image\",\n          image_url: `https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`,\n          alt_text: pokemon.name.english\n        }\n      }]\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/stats.ts"],"names":["GEN_ONE_POKEMON","emojiFor","pickOne","statusFor","pokemon","name","english","id","triggerPhrase","respond","event","client","prisma","rolls","roll","findMany","where","teamId","team","userId","user","orderBy","createdAt","take","chat","postMessage","channel","text","pokemonNumber","emoji","blocks","type","fields","base","HP","Attack","Defense","Speed","accessory","image_url","alt_text"],"mappings":"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","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport { GEN_ONE_POKEMON, emojiFor, pickOne, Pokemon } from \"../pokemon\";\n\nconst statusFor = (pokemon: Pokemon): string => {\n  const name = pokemon.name.english;\n  return pickOne([\n    `${name} is doing OK, thanks for checking in.`,\n    `${name} is great – but a little hungry.`,\n    `${name} is annoyed that you forgot their birthday last week.`,\n    `${name} is good.`,\n    `${name} is alright.`,\n    `${name} is great.`,\n    `${name} has been better, actually.`,\n    `${name} has the sniffles.`,\n    `${name} is doing well.`,\n    `${name} is doing OK.`,\n    `${name} is just fine.`,\n    `${name} is having a rough day.`,\n    `${name} would like a hug.`,\n    `${name} could use.`,\n    `Looks like ${name} is happy.`,\n    `Your ${name} is looking healthy.`,\n    `Your ${name} is well.`,\n    `Your ${name} is just great.`,\n    `Your ${name} is swell.`,\n  ]);\n};\n\nexport default {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const pokemon = GEN_ONE_POKEMON[roll.pokemonNumber - 1];\n    const emoji = emojiFor(pokemon);\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emoji}: ${pokemon.name.english}`,\n      blocks: [\n        {\n          type: \"header\",\n          text: {\n            type: \"plain_text\",\n            text: `It's ${pokemon.name.english}!`,\n          },\n        },\n        {\n          type: \"section\",\n          text: {\n            type: \"mrkdwn\",\n            text: statusFor(pokemon),\n          },\n          fields: [\n            {\n              type: \"mrkdwn\",\n              text: \"*HP*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${pokemon.base.HP}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Attack*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${pokemon.base.Attack}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Defense*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${pokemon.base.Defense}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Speed*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${pokemon.base.Speed}`,\n            },\n          ],\n          accessory: {\n            type: \"image\",\n            image_url: `https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`,\n            alt_text: pokemon.name.english,\n          },\n        },\n      ],\n    });\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}