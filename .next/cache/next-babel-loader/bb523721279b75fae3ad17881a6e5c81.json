{"ast":null,"code":"import { POKEMON, emojiFor } from \"../pokemon\";\nexport default {\n  id: \"battle\",\n  triggerPhrase: \"Battle\",\n  respond: async (event, client, prisma) => {\n    const roll = await pokeForUser(prisma, event.team, event.user);\n    const currentPokemon = POKEMON[roll.pokemonNumber - 1];\n\n    if (currentPokemon == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `Nah`\n      });\n      return;\n    }\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: Battling with a :${emojiFor(currentPokemon)}: ${JSON.stringify(event)}`\n    });\n    Array.from(event.text.matchAll(/<@(\\w+)>/)).filter(async m => {\n      console.log(\"user\", m[1]);\n      const response = await client.users.info({\n        user: m[1]\n      });\n      JSON.stringify(response.user);\n      return true;\n    });\n    event.blocks.filter(b => b.type === \"user\").forEach(async b => {});\n  }\n};\n\nconst pokeForUser = async (prisma, teamId, userId) => {\n  const r = await prisma.roll.findMany({\n    where: {\n      teamId,\n      userId\n    },\n    orderBy: {\n      createdAt: \"desc\"\n    },\n    take: 1\n  });\n  return r[0];\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/battle.ts"],"names":["POKEMON","emojiFor","id","triggerPhrase","respond","event","client","prisma","roll","pokeForUser","team","user","currentPokemon","pokemonNumber","chat","postMessage","channel","text","JSON","stringify","Array","from","matchAll","filter","m","console","log","response","users","info","blocks","b","type","forEach","teamId","userId","r","findMany","where","orderBy","createdAt","take"],"mappings":"AAKA,SAASA,OAAT,EAA2BC,QAA3B,QAA2C,YAA3C;AAEA,eAAe;AACbC,EAAAA,EAAE,EAAE,QADS;AAEbC,EAAAA,aAAa,EAAE,QAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMC,IAAI,GAAG,MAAMC,WAAW,CAACF,MAAD,EAASF,KAAK,CAACK,IAAf,EAAqBL,KAAK,CAACM,IAA3B,CAA9B;AACA,UAAMC,cAAc,GAAGZ,OAAO,CAACQ,IAAI,CAACK,aAAL,GAAqB,CAAtB,CAA9B;;AAEA,QAAID,cAAc,IAAI,IAAtB,EAA4B;AAC1B,YAAMN,MAAM,CAACQ,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,QAAAA,OAAO,EAAEX,KAAK,CAACW,OADa;AAE5BC,QAAAA,IAAI,EAAG;AAFqB,OAAxB,CAAN;AAIA;AACD;;AAED,UAAMX,MAAM,CAACQ,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,MAAAA,OAAO,EAAEX,KAAK,CAACW,OADa;AAE5BC,MAAAA,IAAI,EAAG,KAAIZ,KAAK,CAACM,IAAK,uBAAsBV,QAAQ,CAClDW,cADkD,CAElD,KAAIM,IAAI,CAACC,SAAL,CAAed,KAAf,CAAsB;AAJA,KAAxB,CAAN;AAOAe,IAAAA,KAAK,CAACC,IAAN,CAAWhB,KAAK,CAACY,IAAN,CAAWK,QAAX,CAAoB,UAApB,CAAX,EAA4CC,MAA5C,CAAmD,MAAOC,CAAP,IAAa;AAC9DC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,CAAC,CAAC,CAAD,CAArB;AAEA,YAAMG,QAAQ,GAAG,MAAMrB,MAAM,CAACsB,KAAP,CAAaC,IAAb,CAAkB;AAAElB,QAAAA,IAAI,EAAEa,CAAC,CAAC,CAAD;AAAT,OAAlB,CAAvB;AACAN,MAAAA,IAAI,CAACC,SAAL,CAAeQ,QAAQ,CAAChB,IAAxB;AACA,aAAO,IAAP;AACD,KAND;AAQAN,IAAAA,KAAK,CAACyB,MAAN,CAAaP,MAAb,CAAqBQ,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,MAAtC,EAA8CC,OAA9C,CAAsD,MAAOF,CAAP,IAAa,CAAE,CAArE;AACD;AAnCY,CAAf;;AAsCA,MAAMtB,WAAW,GAAG,OAClBF,MADkB,EAElB2B,MAFkB,EAGlBC,MAHkB,KAIA;AAClB,QAAMC,CAAC,GAAG,MAAM7B,MAAM,CAACC,IAAP,CAAY6B,QAAZ,CAAqB;AACnCC,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAD4B;AAEnCI,IAAAA,OAAO,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAF0B;AAGnCC,IAAAA,IAAI,EAAE;AAH6B,GAArB,CAAhB;AAKA,SAAOL,CAAC,CAAC,CAAD,CAAR;AACD,CAXD","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient, Roll } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport { POKEMON, pickOne, emojiFor } from \"../pokemon\";\n\nexport default {\n  id: \"battle\",\n  triggerPhrase: \"Battle\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const roll = await pokeForUser(prisma, event.team, event.user);\n    const currentPokemon = POKEMON[roll.pokemonNumber - 1];\n\n    if (currentPokemon == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `Nah`,\n      });\n      return;\n    }\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: Battling with a :${emojiFor(\n        currentPokemon\n      )}: ${JSON.stringify(event)}`,\n    });\n\n    Array.from(event.text.matchAll(/<@(\\w+)>/)).filter(async (m) => {\n      console.log(\"user\", m[1]);\n\n      const response = await client.users.info({ user: m[1] });\n      JSON.stringify(response.user);\n      return true;\n    });\n\n    event.blocks.filter((b) => b.type === \"user\").forEach(async (b) => {});\n  },\n} as Responder;\n\nconst pokeForUser = async (\n  prisma: PrismaClient,\n  teamId: string,\n  userId: string\n): Promise<Roll> => {\n  const r = await prisma.roll.findMany({\n    where: { teamId, userId },\n    orderBy: { createdAt: \"desc\" },\n    take: 1,\n  });\n  return r[0];\n};\n"]},"metadata":{},"sourceType":"module"}