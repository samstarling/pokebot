{"ast":null,"code":"const EMOJI = {\n  1: \"f\"\n};\nexport const emojiFor = poke => {\n  if (poke.number > 151) {\n    return \"sparkles\";\n  }\n\n  return EMOJI[poke.number] || poke.name.toLowerCase();\n};\nexport const pickOne = items => {\n  return items[Math.floor(Math.random() * items.length)];\n};\nexport const assignRandomPokemon = async (prisma, teamId, userId, generation) => {\n  return await prisma.pokemon.findMany({\n    where: {\n      generation\n    }\n  }).then(pokes => assignPokemonToUser(prisma, teamId, userId, pickOne(pokes).number));\n};\nexport const assignPokemonToUser = async (prisma, teamId, userId, number) => {\n  return prisma.roll.create({\n    data: {\n      teamId: teamId,\n      userId: userId,\n      Pokemon: {\n        connect: {\n          number\n        }\n      }\n    },\n    include: {\n      Pokemon: true\n    }\n  });\n};\nexport const currentPokemonForUser = async (prisma, teamId, userId) => {\n  const rolls = await prisma.roll.findMany({\n    where: {\n      teamId,\n      userId\n    },\n    orderBy: {\n      createdAt: \"desc\"\n    },\n    take: 1,\n    include: {\n      Pokemon: true\n    }\n  });\n\n  if (rolls.length === 0) {\n    return null;\n  }\n\n  return rolls[0].Pokemon;\n};\nexport const statusFor = pokemon => {\n  const {\n    name,\n    classification\n  } = pokemon;\n  return pickOne([`*${name}* (${classification}) is doing OK, thanks for checking in.`, `*${name}* (${classification}) is great – but a little hungry.`, `*${name}* (${classification}) is annoyed that you forgot their birthday last week.`, `*${name}* (${classification}) is good.`, `*${name}* (${classification}) is alright.`, `*${name}* (${classification}) is great.`, `*${name}* (${classification}) is excellent.`, `*${name}* (${classification}) is lovely.`, `*${name}* (${classification}) is completing mandatory training – Fs in chat please.`, `*${name}* (${classification}) has been better, actually.`, `*${name}* (${classification}) has the sniffles.`, `*${name}* (${classification}) is doing well.`, `*${name}* (${classification}) is doing OK.`, `*${name}* (${classification}) is just fine.`, `*${name}* (${classification}) is having a rough day.`, `*${name}* (${classification}) would like a hug.`, `*${name}* (${classification}) could do with a holiday.`, `Shit, that's a hench *${name}* (${classification}).`, `Looks like *${name}* (${classification}) is happy.`, `Your *${name}* (${classification}) is looking healthy.`, `Your *${name}* (${classification}) is well.`, `Your *${name}* (${classification}) is just great.`, `Your *${name}* (${classification}) is swell.`]);\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/pokemon/index.ts"],"names":["EMOJI","emojiFor","poke","number","name","toLowerCase","pickOne","items","Math","floor","random","length","assignRandomPokemon","prisma","teamId","userId","generation","pokemon","findMany","where","then","pokes","assignPokemonToUser","roll","create","data","Pokemon","connect","include","currentPokemonForUser","rolls","orderBy","createdAt","take","statusFor","classification"],"mappings":"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","sourcesContent":["import { PrismaClient, Pokemon } from \"@prisma/client\";\n\nconst EMOJI: { [n: number]: string } = {\n  1: \"f\",\n};\n\nexport const emojiFor = (poke: Pokemon): string => {\n  if (poke.number > 151) {\n    return \"sparkles\";\n  }\n\n  return EMOJI[poke.number] || poke.name.toLowerCase();\n};\n\nexport const pickOne = <T>(items: T[]): T => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nexport const assignRandomPokemon = async (\n  prisma: PrismaClient,\n  teamId: string,\n  userId: string,\n  generation: number\n) => {\n  return await prisma.pokemon\n    .findMany({\n      where: { generation },\n    })\n    .then((pokes) =>\n      assignPokemonToUser(prisma, teamId, userId, pickOne(pokes).number)\n    );\n};\n\nexport const assignPokemonToUser = async (\n  prisma: PrismaClient,\n  teamId: string,\n  userId: string,\n  number: number\n) => {\n  return prisma.roll.create({\n    data: {\n      teamId: teamId,\n      userId: userId,\n      Pokemon: {\n        connect: {\n          number,\n        },\n      },\n    },\n    include: {\n      Pokemon: true,\n    },\n  });\n};\n\nexport const currentPokemonForUser = async (\n  prisma: PrismaClient,\n  teamId: string,\n  userId: string\n): Promise<Pokemon | null> => {\n  const rolls = await prisma.roll.findMany({\n    where: { teamId, userId },\n    orderBy: { createdAt: \"desc\" },\n    take: 1,\n    include: {\n      Pokemon: true,\n    },\n  });\n\n  if (rolls.length === 0) {\n    return null;\n  }\n\n  return rolls[0].Pokemon;\n};\n\nexport const statusFor = (pokemon: Pokemon): string => {\n  const { name, classification } = pokemon;\n  return pickOne([\n    `*${name}* (${classification}) is doing OK, thanks for checking in.`,\n    `*${name}* (${classification}) is great – but a little hungry.`,\n    `*${name}* (${classification}) is annoyed that you forgot their birthday last week.`,\n    `*${name}* (${classification}) is good.`,\n    `*${name}* (${classification}) is alright.`,\n    `*${name}* (${classification}) is great.`,\n    `*${name}* (${classification}) is excellent.`,\n    `*${name}* (${classification}) is lovely.`,\n    `*${name}* (${classification}) is completing mandatory training – Fs in chat please.`,\n    `*${name}* (${classification}) has been better, actually.`,\n    `*${name}* (${classification}) has the sniffles.`,\n    `*${name}* (${classification}) is doing well.`,\n    `*${name}* (${classification}) is doing OK.`,\n    `*${name}* (${classification}) is just fine.`,\n    `*${name}* (${classification}) is having a rough day.`,\n    `*${name}* (${classification}) would like a hug.`,\n    `*${name}* (${classification}) could do with a holiday.`,\n    `Shit, that's a hench *${name}* (${classification}).`,\n    `Looks like *${name}* (${classification}) is happy.`,\n    `Your *${name}* (${classification}) is looking healthy.`,\n    `Your *${name}* (${classification}) is well.`,\n    `Your *${name}* (${classification}) is just great.`,\n    `Your *${name}* (${classification}) is swell.`,\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}