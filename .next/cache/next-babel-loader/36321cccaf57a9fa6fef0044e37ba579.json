{"ast":null,"code":"import { DateTime } from \"luxon\";\nimport { emojiFor, statusFor, imageFor, renderType, assignRandomPokemon } from \"../pokemon\";\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (event, client, prisma) => {\n    const today = DateTime.local();\n    const where = {\n      generation: 1\n    }; // Generation 2 Thursdays\n\n    if (today.weekday === 4) {\n      where.generation = 2;\n    } // Legendary Christmas Day\n\n\n    if (today.day === 25 && today.month === 12) {\n      where.generation = undefined;\n      where.isLegendary = true;\n    }\n\n    assignRandomPokemon(prisma, event.team, event.user, where).then(async roll => {\n      let message = `:${emojiFor(roll.Pokemon)}: It’s me, ${roll.Pokemon.name}!`;\n      const firstMessage = await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${message}`,\n        icon_url: imageFor(roll.Pokemon),\n        username: roll.Pokemon.name\n      });\n      const status = statusFor(roll.Pokemon);\n      let fields = [];\n\n      if (roll.Pokemon.isLegendary) {\n        fields.push({\n          type: \"mrkdwn\",\n          text: \":sparkles: Legendary\"\n        });\n      }\n\n      fields = fields.concat([{\n        type: \"mrkdwn\",\n        text: renderType(roll.Pokemon)\n      }, {\n        type: \"mrkdwn\",\n        text: `*HP*: ${roll.Pokemon.hp}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Attack*: ${roll.Pokemon.attack}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Defense*: ${roll.Pokemon.defense}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Speed*: ${roll.Pokemon.speed}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Sp. Attack*: ${roll.Pokemon.specialAttack}`\n      }, {\n        type: \"mrkdwn\",\n        text: `*Sp. Defense*: ${roll.Pokemon.specialDefense}`\n      }]);\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${status}`,\n        thread_ts: firstMessage.ts,\n        icon_url: `https://gravel-pokebot.herokuapp.com/oak.png`,\n        username: \"Professor Oak\",\n        blocks: [{\n          type: \"section\",\n          text: {\n            type: \"mrkdwn\",\n            text: status\n          },\n          fields,\n          accessory: {\n            type: \"image\",\n            image_url: imageFor(roll.Pokemon),\n            alt_text: roll.Pokemon.name\n          }\n        }]\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/assign.ts"],"names":["DateTime","emojiFor","statusFor","imageFor","renderType","assignRandomPokemon","id","triggerPhrase","respond","event","client","prisma","today","local","where","generation","weekday","day","month","undefined","isLegendary","team","user","then","roll","message","Pokemon","name","firstMessage","chat","postMessage","channel","text","icon_url","username","status","fields","push","type","concat","hp","attack","defense","speed","specialAttack","specialDefense","thread_ts","ts","blocks","accessory","image_url","alt_text"],"mappings":"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","sourcesContent":["import {\n  WebClient,\n  WebAPICallResult,\n  PlainTextElement,\n  MrkdwnElement,\n} from \"@slack/web-api\";\nimport { PrismaClient, PokemonWhereInput } from \"@prisma/client\";\nimport { DateTime } from \"luxon\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport {\n  emojiFor,\n  statusFor,\n  imageFor,\n  renderType,\n  assignRandomPokemon,\n} from \"../pokemon\";\n\ntype PostMessageResult = WebAPICallResult & {\n  ts: string;\n};\n\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const today = DateTime.local();\n\n    const where: PokemonWhereInput = {\n      generation: 1,\n    };\n\n    // Generation 2 Thursdays\n    if (today.weekday === 4) {\n      where.generation = 2;\n    }\n\n    // Legendary Christmas Day\n    if (today.day === 25 && today.month === 12) {\n      where.generation = undefined;\n      where.isLegendary = true;\n    }\n\n    assignRandomPokemon(prisma, event.team, event.user, where).then(\n      async (roll) => {\n        let message = `:${emojiFor(roll.Pokemon)}: It’s me, ${\n          roll.Pokemon.name\n        }!`;\n\n        const firstMessage = (await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}>: ${message}`,\n          icon_url: imageFor(roll.Pokemon),\n          username: roll.Pokemon.name,\n        })) as PostMessageResult;\n\n        const status = statusFor(roll.Pokemon);\n\n        let fields: (PlainTextElement | MrkdwnElement)[] = [];\n\n        if (roll.Pokemon.isLegendary) {\n          fields.push({\n            type: \"mrkdwn\",\n            text: \":sparkles: Legendary\",\n          });\n        }\n\n        fields = fields.concat([\n          {\n            type: \"mrkdwn\",\n            text: renderType(roll.Pokemon),\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*HP*: ${roll.Pokemon.hp}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Attack*: ${roll.Pokemon.attack}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Defense*: ${roll.Pokemon.defense}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Speed*: ${roll.Pokemon.speed}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Sp. Attack*: ${roll.Pokemon.specialAttack}`,\n          },\n          {\n            type: \"mrkdwn\",\n            text: `*Sp. Defense*: ${roll.Pokemon.specialDefense}`,\n          },\n        ]);\n\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}>: ${status}`,\n          thread_ts: firstMessage.ts,\n          icon_url: `https://gravel-pokebot.herokuapp.com/oak.png`,\n          username: \"Professor Oak\",\n          blocks: [\n            {\n              type: \"section\",\n              text: {\n                type: \"mrkdwn\",\n                text: status,\n              },\n              fields,\n              accessory: {\n                type: \"image\",\n                image_url: imageFor(roll.Pokemon),\n                alt_text: roll.Pokemon.name,\n              },\n            },\n          ],\n        });\n      }\n    );\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}