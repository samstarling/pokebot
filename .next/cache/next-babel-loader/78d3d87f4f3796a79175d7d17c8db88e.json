{"ast":null,"code":"import { DateTime } from \"luxon\";\nimport { emojiFor, statusFor, renderType, assignRandomPokemon } from \"../pokemon\";\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (event, client, prisma) => {\n    const today = DateTime.local();\n    const where = {\n      generation: 1\n    }; // Generation 2 Thursdays\n\n    if (today.weekday === 4) {\n      where.generation = 2;\n    } // Legendary Christmas Day\n\n\n    if (today.day === 24 && today.month === 12) {\n      where.isLegendary = true;\n    }\n\n    assignRandomPokemon(prisma, event.team, event.user, where).then(async roll => {\n      let message = `:${emojiFor(roll.Pokemon)}: It’s me, ${roll.Pokemon.name}!`;\n      const firstMessage = await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${message}`,\n        icon_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n        username: roll.Pokemon.name\n      });\n      const status = statusFor(roll.Pokemon);\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${status}`,\n        thread_ts: firstMessage.ts,\n        icon_url: `https://gravel-pokebot.herokuapp.com/oak.png`,\n        username: \"Professor Oak\",\n        blocks: [{\n          type: \"section\",\n          text: {\n            type: \"mrkdwn\",\n            text: status\n          },\n          fields: [{\n            type: \"mrkdwn\",\n            text: renderType(roll.Pokemon)\n          }, {\n            type: \"mrkdwn\",\n            text: `*HP*: ${roll.Pokemon.hp}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Attack*: ${roll.Pokemon.attack}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Defense*: ${roll.Pokemon.defense}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Speed*: ${roll.Pokemon.speed}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Sp. Attack*: ${roll.Pokemon.specialAttack}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Sp. Defense*: ${roll.Pokemon.specialDefense}`\n          }],\n          accessory: {\n            type: \"image\",\n            image_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n            alt_text: roll.Pokemon.name\n          }\n        }]\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/assign.ts"],"names":["DateTime","emojiFor","statusFor","renderType","assignRandomPokemon","id","triggerPhrase","respond","event","client","prisma","today","local","where","generation","weekday","day","month","isLegendary","team","user","then","roll","message","Pokemon","name","firstMessage","chat","postMessage","channel","text","icon_url","number","username","status","thread_ts","ts","blocks","type","fields","hp","attack","defense","speed","specialAttack","specialDefense","accessory","image_url","alt_text"],"mappings":"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","sourcesContent":["import { WebClient, WebAPICallResult } from \"@slack/web-api\";\nimport { PrismaClient, PokemonWhereInput } from \"@prisma/client\";\nimport { DateTime } from \"luxon\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport {\n  emojiFor,\n  statusFor,\n  renderType,\n  assignRandomPokemon,\n} from \"../pokemon\";\n\ntype PostMessageResult = WebAPICallResult & {\n  ts: string;\n};\n\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const today = DateTime.local();\n\n    const where: PokemonWhereInput = {\n      generation: 1,\n    };\n\n    // Generation 2 Thursdays\n    if (today.weekday === 4) {\n      where.generation = 2;\n    }\n\n    // Legendary Christmas Day\n    if (today.day === 24 && today.month === 12) {\n      where.isLegendary = true;\n    }\n\n    assignRandomPokemon(prisma, event.team, event.user, where).then(\n      async (roll) => {\n        let message = `:${emojiFor(roll.Pokemon)}: It’s me, ${\n          roll.Pokemon.name\n        }!`;\n\n        const firstMessage = (await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}>: ${message}`,\n          icon_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n          username: roll.Pokemon.name,\n        })) as PostMessageResult;\n\n        const status = statusFor(roll.Pokemon);\n\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}>: ${status}`,\n          thread_ts: firstMessage.ts,\n          icon_url: `https://gravel-pokebot.herokuapp.com/oak.png`,\n          username: \"Professor Oak\",\n          blocks: [\n            {\n              type: \"section\",\n              text: {\n                type: \"mrkdwn\",\n                text: status,\n              },\n              fields: [\n                {\n                  type: \"mrkdwn\",\n                  text: renderType(roll.Pokemon),\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*HP*: ${roll.Pokemon.hp}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Attack*: ${roll.Pokemon.attack}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Defense*: ${roll.Pokemon.defense}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Speed*: ${roll.Pokemon.speed}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Sp. Attack*: ${roll.Pokemon.specialAttack}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Sp. Defense*: ${roll.Pokemon.specialDefense}`,\n                },\n              ],\n              accessory: {\n                type: \"image\",\n                image_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n                alt_text: roll.Pokemon.name,\n              },\n            },\n          ],\n        });\n      }\n    );\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}