{"ast":null,"code":"import { emojiFor } from \"../pokemon\";\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (event, client, prisma) => {\n    await prisma.roll.findMany({\n      where: {\n        userId: event.user\n      },\n      include: {\n        Pokemon: true\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      }\n    }).then(rolls => rolls.forEach(async r => {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> :${emojiFor(r.Pokemon)}: ${r.Pokemon.name} ${r.createdAt}`\n      });\n    }));\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/history.ts"],"names":["emojiFor","id","triggerPhrase","respond","event","client","prisma","roll","findMany","where","userId","user","include","Pokemon","orderBy","createdAt","then","rolls","forEach","r","chat","postMessage","channel","text","name"],"mappings":"AAGA,SAASA,QAAT,QAAyB,YAAzB;AAIA,eAAe;AACbC,EAAAA,EAAE,EAAE,SADS;AAEbC,EAAAA,aAAa,EAAE,SAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMA,MAAM,CAACC,IAAP,CACHC,QADG,CACM;AACRC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEN,KAAK,CAACO;AAAhB,OADC;AAERC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFD;AAGRC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb;AAHD,KADN,EAMHC,IANG,CAMGC,KAAD,IACJA,KAAK,CAACC,OAAN,CAAc,MAAOC,CAAP,IAAa;AACzB,YAAMd,MAAM,CAACe,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,QAAAA,OAAO,EAAElB,KAAK,CAACkB,OADa;AAE5BC,QAAAA,IAAI,EAAG,KAAInB,KAAK,CAACO,IAAK,MAAKX,QAAQ,CAACmB,CAAC,CAACN,OAAH,CAAY,KAC7CM,CAAC,CAACN,OAAF,CAAUW,IACX,IAAGL,CAAC,CAACJ,SAAU;AAJY,OAAxB,CAAN;AAMD,KAPD,CAPE,CAAN;AAgBD;AAxBY,CAAf","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { emojiFor } from \"../pokemon\";\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\n\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    await prisma.roll\n      .findMany({\n        where: { userId: event.user },\n        include: { Pokemon: true },\n        orderBy: { createdAt: \"desc\" },\n      })\n      .then((rolls) =>\n        rolls.forEach(async (r) => {\n          await client.chat.postMessage({\n            channel: event.channel,\n            text: `<@${event.user}> :${emojiFor(r.Pokemon)}: ${\n              r.Pokemon.name\n            } ${r.createdAt}`,\n          });\n        })\n      );\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}