{"ast":null,"code":"import { emojiFor } from \"../pokemon\";\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (event, client, prisma) => {\n    await prisma.roll.findMany({\n      where: {\n        userId: event.user\n      },\n      include: {\n        Pokemon: true\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 5\n    }).then(async rolls => {\n      const text = rolls.map(r => descriptionFor(r.Pokemon)).join(\", \");\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Your most recent Pokémon were ${text}`\n      });\n    });\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emoji}: ${roll.Pokemon.name}`,\n      blocks: [{\n        type: \"section\",\n        text: {\n          type: \"mrkdwn\",\n          text: statusFor(roll.Pokemon)\n        },\n        fields: [{\n          type: \"mrkdwn\",\n          text: \"*HP*\"\n        }, {\n          type: \"plain_text\",\n          text: `${roll.Pokemon.hp}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Attack*\"\n        }, {\n          type: \"plain_text\",\n          text: `${roll.Pokemon.attack}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Defense*\"\n        }, {\n          type: \"plain_text\",\n          text: `${roll.Pokemon.defense}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Speed*\"\n        }, {\n          type: \"plain_text\",\n          text: `${roll.Pokemon.speed}`\n        }],\n        accessory: {\n          type: \"image\",\n          image_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n          alt_text: roll.Pokemon.name\n        }\n      }]\n    });\n  }\n};\n\nconst descriptionFor = p => `:${emojiFor(p)}: ${p.name}`;","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/history.ts"],"names":["emojiFor","id","triggerPhrase","respond","event","client","prisma","roll","findMany","where","userId","user","include","Pokemon","orderBy","createdAt","take","then","rolls","text","map","r","descriptionFor","join","chat","postMessage","channel","emoji","name","blocks","type","statusFor","fields","hp","attack","defense","speed","accessory","image_url","number","alt_text","p"],"mappings":"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","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient, Pokemon } from \"@prisma/client\";\n\nimport { emojiFor } from \"../pokemon\";\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\n\nexport default {\n  id: \"history\",\n  triggerPhrase: \"History\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    await prisma.roll\n      .findMany({\n        where: { userId: event.user },\n        include: { Pokemon: true },\n        orderBy: { createdAt: \"desc\" },\n        take: 5,\n      })\n      .then(async (rolls) => {\n        const text = rolls.map((r) => descriptionFor(r.Pokemon)).join(\", \");\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}> Your most recent Pokémon were ${text}`,\n        });\n      });\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emoji}: ${roll.Pokemon.name}`,\n      blocks: [\n        {\n          type: \"section\",\n          text: {\n            type: \"mrkdwn\",\n            text: statusFor(roll.Pokemon),\n          },\n          fields: [\n            {\n              type: \"mrkdwn\",\n              text: \"*HP*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${roll.Pokemon.hp}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Attack*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${roll.Pokemon.attack}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Defense*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${roll.Pokemon.defense}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Speed*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${roll.Pokemon.speed}`,\n            },\n          ],\n          accessory: {\n            type: \"image\",\n            image_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n            alt_text: roll.Pokemon.name,\n          },\n        },\n      ],\n    });\n  },\n} as Responder;\n\nconst descriptionFor = (p: Pokemon): string => `:${emojiFor(p)}: ${p.name}`;\n"]},"metadata":{},"sourceType":"module"}