{"ast":null,"code":"import { emojiFor, statusFor, assignRandomPokemon } from \"../pokemon\";\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (event, client, prisma) => {\n    const day = new Date().getDay();\n    let generation = 1;\n\n    if (day === 4) {\n      generation = 2;\n    }\n\n    assignRandomPokemon(prisma, event.team, event.user, generation).then(async roll => {\n      let message = `:${emojiFor(roll.Pokemon)}: It’s ${roll.Pokemon.name}!`;\n\n      if (generation === 2) {\n        message = `:${emojiFor(roll.Pokemon)}: Thursday means 2nd gen Pokés for everyone: it’s ${roll.Pokemon.name}!`;\n      }\n\n      const firstMessage = await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${message}`\n      });\n      const status = statusFor(roll.Pokemon);\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${status}`,\n        blocks: [{\n          type: \"section\",\n          text: {\n            type: \"mrkdwn\",\n            text: status\n          },\n          fields: [{\n            type: \"mrkdwn\",\n            text: `*HP*: ${roll.Pokemon.hp}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Attack*: ${roll.Pokemon.attack}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Defense*: ${roll.Pokemon.defense}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Speed*: ${roll.Pokemon.speed}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Sp. Defense*: ${roll.Pokemon.speed}`\n          }, {\n            type: \"mrkdwn\",\n            text: `*Speed*: ${roll.Pokemon.speed}`\n          }],\n          accessory: {\n            type: \"image\",\n            image_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n            alt_text: roll.Pokemon.name\n          }\n        }]\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/assign.ts"],"names":["emojiFor","statusFor","assignRandomPokemon","id","triggerPhrase","respond","event","client","prisma","day","Date","getDay","generation","team","user","then","roll","message","Pokemon","name","firstMessage","chat","postMessage","channel","text","status","blocks","type","fields","hp","attack","defense","speed","accessory","image_url","number","alt_text"],"mappings":"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","sourcesContent":["import { WebClient, WebAPICallResult } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport { emojiFor, statusFor, assignRandomPokemon } from \"../pokemon\";\n\ntype PostMessageResult = WebAPICallResult & {\n  ts: string;\n};\n\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const day = new Date().getDay();\n\n    let generation = 1;\n    if (day === 4) {\n      generation = 2;\n    }\n\n    assignRandomPokemon(prisma, event.team, event.user, generation).then(\n      async (roll) => {\n        let message = `:${emojiFor(roll.Pokemon)}: It’s ${roll.Pokemon.name}!`;\n        if (generation === 2) {\n          message = `:${emojiFor(\n            roll.Pokemon\n          )}: Thursday means 2nd gen Pokés for everyone: it’s ${\n            roll.Pokemon.name\n          }!`;\n        }\n\n        const firstMessage = (await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}>: ${message}`,\n        })) as PostMessageResult;\n\n        const status = statusFor(roll.Pokemon);\n\n        await client.chat.postMessage({\n          channel: event.channel,\n          text: `<@${event.user}>: ${status}`,\n          blocks: [\n            {\n              type: \"section\",\n              text: {\n                type: \"mrkdwn\",\n                text: status,\n              },\n              fields: [\n                {\n                  type: \"mrkdwn\",\n                  text: `*HP*: ${roll.Pokemon.hp}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Attack*: ${roll.Pokemon.attack}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Defense*: ${roll.Pokemon.defense}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Speed*: ${roll.Pokemon.speed}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Sp. Defense*: ${roll.Pokemon.speed}`,\n                },\n                {\n                  type: \"mrkdwn\",\n                  text: `*Speed*: ${roll.Pokemon.speed}`,\n                },\n              ],\n              accessory: {\n                type: \"image\",\n                image_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n                alt_text: roll.Pokemon.name,\n              },\n            },\n          ],\n        });\n      }\n    );\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}