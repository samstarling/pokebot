{"ast":null,"code":"import { emojiFor, pickOne } from \"../pokemon\";\n\nconst statusFor = pokemon => {\n  const {\n    name,\n    classification\n  } = pokemon;\n  return pickOne([`*${name}* (${classification}) is doing OK, thanks for checking in.`, `*${name}* (${classification}) is great – but a little hungry.`, `*${name}* (${classification}) is annoyed that you forgot their birthday last week.`, `*${name}* (${classification}) is good.`, `*${name}* (${classification}) is alright.`, `*${name}* (${classification}) is great.`, `*${name}* (${classification}) is excellent.`, `*${name}* (${classification}) is lovely.`, `*${name}* (${classification}) is completing mandatory training – Fs in chat please.`, `*${name}* (${classification}) has been better, actually.`, `*${name}* (${classification}) has the sniffles.`, `*${name}* (${classification}) is doing well.`, `*${name}* (${classification}) is doing OK.`, `*${name}* (${classification}) is just fine.`, `*${name}* (${classification}) is having a rough day.`, `*${name}* (${classification}) would like a hug.`, `*${name}* (${classification}) could do with a holiday.`, `Shit, that's a hench *${name}* (${classification}).`, `Looks like *${name}* (${classification}) is happy.`, `Your *${name}* (${classification}) is looking healthy.`, `Your *${name}* (${classification}) is well.`, `Your *${name}* (${classification}) is just great.`, `Your *${name}* (${classification}) is swell.`]);\n};\n\nexport default {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (event, client, prisma) => {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1,\n      include: {\n        Pokemon: true\n      }\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const emoji = emojiFor(roll.Pokemon);\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emoji}: ${roll.Pokemon.name}`,\n      blocks: [{\n        type: \"section\",\n        text: {\n          type: \"mrkdwn\",\n          text: statusFor(roll.Pokemon)\n        },\n        fields: [{\n          type: \"mrkdwn\",\n          text: \"*HP*\"\n        }, {\n          type: \"plain_text\",\n          text: `${roll.Pokemon.hp}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Attack*\"\n        }, {\n          type: \"plain_text\",\n          text: `${roll.Pokemon.attack}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Defense*\"\n        }, {\n          type: \"plain_text\",\n          text: `${roll.Pokemon.defense}`\n        }, {\n          type: \"mrkdwn\",\n          text: \"*Speed*\"\n        }, {\n          type: \"plain_text\",\n          text: `${roll.Pokemon.speed}`\n        }],\n        accessory: {\n          type: \"image\",\n          image_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n          alt_text: roll.Pokemon.name\n        }\n      }]\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/stats.ts"],"names":["emojiFor","pickOne","statusFor","pokemon","name","classification","id","triggerPhrase","respond","event","client","prisma","rolls","roll","findMany","where","teamId","team","userId","user","orderBy","createdAt","take","include","Pokemon","chat","postMessage","channel","text","emoji","blocks","type","fields","hp","attack","defense","speed","accessory","image_url","number","alt_text"],"mappings":"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","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient, Pokemon } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport { emojiFor, pickOne } from \"../pokemon\";\n\nconst statusFor = (pokemon: Pokemon): string => {\n  const { name, classification } = pokemon;\n  return pickOne([\n    `*${name}* (${classification}) is doing OK, thanks for checking in.`,\n    `*${name}* (${classification}) is great – but a little hungry.`,\n    `*${name}* (${classification}) is annoyed that you forgot their birthday last week.`,\n    `*${name}* (${classification}) is good.`,\n    `*${name}* (${classification}) is alright.`,\n    `*${name}* (${classification}) is great.`,\n    `*${name}* (${classification}) is excellent.`,\n    `*${name}* (${classification}) is lovely.`,\n    `*${name}* (${classification}) is completing mandatory training – Fs in chat please.`,\n    `*${name}* (${classification}) has been better, actually.`,\n    `*${name}* (${classification}) has the sniffles.`,\n    `*${name}* (${classification}) is doing well.`,\n    `*${name}* (${classification}) is doing OK.`,\n    `*${name}* (${classification}) is just fine.`,\n    `*${name}* (${classification}) is having a rough day.`,\n    `*${name}* (${classification}) would like a hug.`,\n    `*${name}* (${classification}) could do with a holiday.`,\n    `Shit, that's a hench *${name}* (${classification}).`,\n    `Looks like *${name}* (${classification}) is happy.`,\n    `Your *${name}* (${classification}) is looking healthy.`,\n    `Your *${name}* (${classification}) is well.`,\n    `Your *${name}* (${classification}) is just great.`,\n    `Your *${name}* (${classification}) is swell.`,\n  ]);\n};\n\nexport default {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n      include: {\n        Pokemon: true,\n      },\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const emoji = emojiFor(roll.Pokemon);\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emoji}: ${roll.Pokemon.name}`,\n      blocks: [\n        {\n          type: \"section\",\n          text: {\n            type: \"mrkdwn\",\n            text: statusFor(roll.Pokemon),\n          },\n          fields: [\n            {\n              type: \"mrkdwn\",\n              text: \"*HP*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${roll.Pokemon.hp}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Attack*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${roll.Pokemon.attack}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Defense*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${roll.Pokemon.defense}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: \"*Speed*\",\n            },\n            {\n              type: \"plain_text\",\n              text: `${roll.Pokemon.speed}`,\n            },\n          ],\n          accessory: {\n            type: \"image\",\n            image_url: `https://pokeres.bastionbot.org/images/pokemon/${roll.Pokemon.number}.png`,\n            alt_text: roll.Pokemon.name,\n          },\n        },\n      ],\n    });\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}