{"ast":null,"code":"import { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { installer } from \"../../lib/slack/installer\";\nimport { POKEMON, emojiFor } from \"../../lib/pokemon\";\nconst prisma = new PrismaClient();\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\nconst THANK_YOUS = [\"You're very welcome\", \"No problem\", \"No worries mate\", \"Any time\"];\n\nconst pickOne = items => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nconst AssignPokemon = {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (event, client) => {\n    const result = pickOne(POKEMON);\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id\n      }\n    });\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(result)}: It’s ${result.name.english}!`\n    });\n  }\n};\nconst QueryLatest = {\n  id: \"query-latest-pokemon\",\n  triggerPhrase: \"Who's my Pokémon?\",\n  respond: async (event, client) => {\n    const result = pickOne(POKEMON);\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id\n      }\n    });\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(result)}: It’s ${result.name.english}!`\n    });\n  }\n};\n\nconst pickPokemon = async event => {\n  const installData = await installer.authorize({\n    teamId: event.team\n  });\n  const web = new WebClient(installData.botToken);\n  const responders = [AssignPokemon];\n  responders.forEach(async r => {\n    const sanitizedText = event.text.toLowerCase().replace(\"’\", \"'\");\n\n    if (sanitizedText.includes(r.triggerPhrase.toLowerCase())) {\n      r.respond(event, web);\n    }\n  });\n\n  if (event.text.toLowerCase().includes(\"Who’s my Pokémon?\".toLowerCase()) || event.text.toLowerCase().includes(\"Who's my Pokémon?\".toLowerCase())) {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1\n    });\n\n    if (rolls[0] == null) {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: Your last roll was :${emojiFor(result)}: ${result.name.english}`\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"How’s my Pokémon?\".toLowerCase()) || event.text.toLowerCase().includes(\"How's my Pokémon?\".toLowerCase())) {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1\n    });\n\n    if (rolls[0] == null) {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    const emoji = result.emoji || result.name.english.toLowerCase();\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: [`<@${event.user}>: :${emoji}: ${result.name.english}`, `*HP:* ${result.base.HP}`, `*Attack:* ${result.base.Attack}`, `*Defense:* ${result.base.Defense}`].join(\"\\n\")\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"thanks\") || event.text.toLowerCase().includes(\"thank you\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> ${pickOne(THANK_YOUS)}`\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"reroll\")) {\n    if (new Date().getDay() == 5) {\n      var _result$emoji;\n\n      var result = pickOne(POKEMON);\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: :${(_result$emoji = result.emoji) !== null && _result$emoji !== void 0 ? _result$emoji : result.name.english.toLowerCase()}: It’s ${result.name.english}!`\n      });\n    } else {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Sorry, only on a Friday`\n      });\n    }\n  }\n\n  if (event.text.toLowerCase().includes(\"help\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> There is no help, just roll a damn Pokémon already`\n    });\n  }\n};\n\nslackEvents.on(\"app_mention\", pickPokemon);\nexport default slackEvents.requestListener();\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/pages/api/event.ts"],"names":["createEventAdapter","WebClient","PrismaClient","installer","POKEMON","emojiFor","prisma","slackEvents","process","env","SLACK_SIGNING_SECRET","THANK_YOUS","pickOne","items","Math","floor","random","length","AssignPokemon","id","triggerPhrase","respond","event","client","result","roll","create","data","teamId","team","userId","user","pokemonNumber","chat","postMessage","channel","text","name","english","QueryLatest","pickPokemon","installData","authorize","web","botToken","responders","forEach","r","sanitizedText","toLowerCase","replace","includes","rolls","findMany","where","orderBy","createdAt","take","emoji","base","HP","Attack","Defense","join","Date","getDay","on","requestListener","config","api","bodyParser","externalResolver"],"mappings":"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","sourcesContent":["import { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { installer } from \"../../lib/slack/installer\";\nimport { POKEMON, emojiFor } from \"../../lib/pokemon\";\nimport { type } from \"os\";\n\nconst prisma = new PrismaClient();\n\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\n\nconst THANK_YOUS = [\n  \"You're very welcome\",\n  \"No problem\",\n  \"No worries mate\",\n  \"Any time\",\n];\n\ntype MentionEvent = {\n  channel: string;\n  text: string;\n  user: string;\n  team: string;\n  enterprise_id: string;\n};\n\nconst pickOne = <T>(items: T[]): T => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\ntype Responder = {\n  id: string;\n  triggerPhrase: string;\n  respond: (event: MentionEvent, client: WebClient) => void;\n};\n\nconst AssignPokemon: Responder = {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (event: MentionEvent, client: WebClient) => {\n    const result = pickOne(POKEMON);\n\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id,\n      },\n    });\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(result)}: It’s ${\n        result.name.english\n      }!`,\n    });\n  },\n};\n\nconst QueryLatest: Responder = {\n  id: \"query-latest-pokemon\",\n  triggerPhrase: \"Who's my Pokémon?\",\n  respond: async (event: MentionEvent, client: WebClient) => {\n    const result = pickOne(POKEMON);\n\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id,\n      },\n    });\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(result)}: It’s ${\n        result.name.english\n      }!`,\n    });\n  },\n};\n\nconst pickPokemon = async (event: MentionEvent) => {\n  const installData = await installer.authorize({ teamId: event.team });\n  const web = new WebClient(installData.botToken);\n\n  const responders: Responder[] = [AssignPokemon];\n\n  responders.forEach(async (r) => {\n    const sanitizedText = event.text.toLowerCase().replace(\"’\", \"'\");\n    if (sanitizedText.includes(r.triggerPhrase.toLowerCase())) {\n      r.respond(event, web);\n    }\n  });\n\n  if (\n    event.text.toLowerCase().includes(\"Who’s my Pokémon?\".toLowerCase()) ||\n    event.text.toLowerCase().includes(\"Who's my Pokémon?\".toLowerCase())\n  ) {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n    });\n\n    if (rolls[0] == null) {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: Your last roll was :${emojiFor(result)}: ${\n        result.name.english\n      }`,\n    });\n  }\n\n  if (\n    event.text.toLowerCase().includes(\"How’s my Pokémon?\".toLowerCase()) ||\n    event.text.toLowerCase().includes(\"How's my Pokémon?\".toLowerCase())\n  ) {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n    });\n\n    if (rolls[0] == null) {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    const emoji = result.emoji || result.name.english.toLowerCase();\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: [\n        `<@${event.user}>: :${emoji}: ${result.name.english}`,\n        `*HP:* ${result.base.HP}`,\n        `*Attack:* ${result.base.Attack}`,\n        `*Defense:* ${result.base.Defense}`,\n      ].join(\"\\n\"),\n    });\n  }\n\n  if (\n    event.text.toLowerCase().includes(\"thanks\") ||\n    event.text.toLowerCase().includes(\"thank you\")\n  ) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> ${pickOne(THANK_YOUS)}`,\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"reroll\")) {\n    if (new Date().getDay() == 5) {\n      var result = pickOne(POKEMON);\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: :${\n          result.emoji ?? result.name.english.toLowerCase()\n        }: It’s ${result.name.english}!`,\n      });\n    } else {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Sorry, only on a Friday`,\n      });\n    }\n  }\n\n  if (event.text.toLowerCase().includes(\"help\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> There is no help, just roll a damn Pokémon already`,\n    });\n  }\n};\n\nslackEvents.on(\"app_mention\", pickPokemon);\n\nexport default slackEvents.requestListener();\n\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}