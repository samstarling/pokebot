{"ast":null,"code":"import { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { installer } from \"../../lib/slack/installer\";\nimport { POKEMON } from \"../../lib/pokemon\";\nconst prisma = new PrismaClient();\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\nconst THANK_YOUS = [\"You're very welcome\", \"No problem\", \"No worries mate\", \"Any time\"];\n\nconst pickOne = items => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nconst pickPokemon = async event => {\n  const installData = await installer.authorize({\n    teamId: event.team\n  });\n  const web = new WebClient(installData.botToken);\n\n  if (event.text.toLowerCase().includes(\"Who’s that Pokémon?\".toLowerCase()) || event.text.toLowerCase().includes(\"Who's that Pokémon?\".toLowerCase())) {\n    const result = pickOne(POKEMON);\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id\n      }\n    });\n    const emoji = result.emoji || result.name.english.toLowerCase();\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emoji}: It’s ${result.name.english}!`\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"Who’s my Pokémon?\".toLowerCase()) || event.text.toLowerCase().includes(\"Who's my Pokémon?\".toLowerCase())) {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1\n    });\n\n    if (rolls[0] == null) {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: ${JSON.stringify(result)}`\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"thanks\") || event.text.toLowerCase().includes(\"thank you\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> ${pickOne(THANK_YOUS)}`\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"reroll\")) {\n    if (new Date().getDay() == 5) {\n      var _result$emoji;\n\n      var result = pickOne(POKEMON);\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: :${(_result$emoji = result.emoji) !== null && _result$emoji !== void 0 ? _result$emoji : result.name.english.toLowerCase()}: It’s ${result.name.english}!`\n      });\n    } else {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Sorry, only on a Friday`\n      });\n    }\n  }\n\n  if (event.text.toLowerCase().includes(\"help\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> There is no help, just roll a damn Pokémon already`\n    });\n  }\n};\n\nslackEvents.on(\"app_mention\", pickPokemon);\nexport default slackEvents.requestListener();\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/pages/api/event.ts"],"names":["createEventAdapter","WebClient","PrismaClient","installer","POKEMON","prisma","slackEvents","process","env","SLACK_SIGNING_SECRET","THANK_YOUS","pickOne","items","Math","floor","random","length","pickPokemon","event","installData","authorize","teamId","team","web","botToken","text","toLowerCase","includes","result","roll","create","data","userId","user","pokemonNumber","id","emoji","name","english","chat","postMessage","channel","rolls","findMany","where","orderBy","createdAt","take","JSON","stringify","Date","getDay","on","requestListener","config","api","bodyParser","externalResolver"],"mappings":"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","sourcesContent":["import { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { installer } from \"../../lib/slack/installer\";\nimport { POKEMON } from \"../../lib/pokemon\";\n\nconst prisma = new PrismaClient();\n\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\n\nconst THANK_YOUS = [\n  \"You're very welcome\",\n  \"No problem\",\n  \"No worries mate\",\n  \"Any time\",\n];\n\ntype MentionEvent = {\n  channel: string;\n  text: string;\n  user: string;\n  team: string;\n  enterprise_id: string;\n};\n\nconst pickOne = <T>(items: T[]): T => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n\nconst pickPokemon = async (event: MentionEvent) => {\n  const installData = await installer.authorize({ teamId: event.team });\n  const web = new WebClient(installData.botToken);\n\n  if (\n    event.text.toLowerCase().includes(\"Who’s that Pokémon?\".toLowerCase()) ||\n    event.text.toLowerCase().includes(\"Who's that Pokémon?\".toLowerCase())\n  ) {\n    const result = pickOne(POKEMON);\n\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id,\n      },\n    });\n\n    const emoji = result.emoji || result.name.english.toLowerCase();\n\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emoji}: It’s ${result.name.english}!`,\n    });\n  }\n\n  if (\n    event.text.toLowerCase().includes(\"Who’s my Pokémon?\".toLowerCase()) ||\n    event.text.toLowerCase().includes(\"Who's my Pokémon?\".toLowerCase())\n  ) {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n    });\n\n    if (rolls[0] == null) {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: ${JSON.stringify(result)}`,\n    });\n  }\n\n  if (\n    event.text.toLowerCase().includes(\"thanks\") ||\n    event.text.toLowerCase().includes(\"thank you\")\n  ) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> ${pickOne(THANK_YOUS)}`,\n    });\n  }\n\n  if (event.text.toLowerCase().includes(\"reroll\")) {\n    if (new Date().getDay() == 5) {\n      var result = pickOne(POKEMON);\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: :${\n          result.emoji ?? result.name.english.toLowerCase()\n        }: It’s ${result.name.english}!`,\n      });\n    } else {\n      await web.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}> Sorry, only on a Friday`,\n      });\n    }\n  }\n\n  if (event.text.toLowerCase().includes(\"help\")) {\n    await web.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> There is no help, just roll a damn Pokémon already`,\n    });\n  }\n};\n\nslackEvents.on(\"app_mention\", pickPokemon);\n\nexport default slackEvents.requestListener();\n\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}