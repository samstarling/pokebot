{"ast":null,"code":"import { PrismaClient } from \"@prisma/client\";\nconst prisma = new PrismaClient();\nimport csv from \"csv-parser\";\nimport fs from \"fs\";\nexport default ((req, res) => {\n  const results = [];\n  fs.createReadStream(\"./data/pokemon.csv\").pipe(csv()).on(\"data\", data => results.push(data)).on(\"end\", () => {\n    results.forEach(async row => {\n      console.log(row.name, row.type1, row.is_legendary);\n      const update = {\n        name: row.name,\n        generation: parseInt(row.generation),\n        number: parseInt(row.pokedex_number),\n        classification: row.classfication,\n        primaryType: row.type1,\n        hp: parseInt(row.hp),\n        attack: parseInt(row.attack),\n        defense: parseInt(row.defense),\n        speed: parseInt(row.speed),\n        specialAttack: parseInt(row.sp_attack),\n        specialDefense: parseInt(row.sp_defense),\n        isLegendary: row.is_legendary === 1\n      };\n\n      if (row.type2 !== \"\") {\n        update.secondaryType = row.type2;\n      }\n\n      await prisma.pokemon.upsert({\n        where: {\n          number: parseInt(row.pokedex_number)\n        },\n        create: {\n          name: row.name,\n          generation: parseInt(row.generation),\n          number: parseInt(row.pokedex_number)\n        },\n        update\n      });\n    });\n    res.status(200).json({\n      results: results\n    });\n  });\n});","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/pages/api/import.ts"],"names":["PrismaClient","prisma","csv","fs","req","res","results","createReadStream","pipe","on","data","push","forEach","row","console","log","name","type1","is_legendary","update","generation","parseInt","number","pokedex_number","classification","classfication","primaryType","hp","attack","defense","speed","specialAttack","sp_attack","specialDefense","sp_defense","isLegendary","type2","secondaryType","pokemon","upsert","where","create","status","json"],"mappings":"AAAA,SAASA,YAAT,QAAiD,gBAAjD;AAEA,MAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;AAEA,OAAOE,GAAP,MAAgB,YAAhB;AACA,OAAOC,EAAP,MAAe,IAAf;AAIA,gBAAe,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,QAAMC,OAcJ,GAAG,EAdL;AAgBAH,EAAAA,EAAE,CAACI,gBAAH,CAAoB,oBAApB,EACGC,IADH,CACQN,GAAG,EADX,EAEGO,EAFH,CAEM,MAFN,EAEeC,IAAD,IAAUJ,OAAO,CAACK,IAAR,CAAaD,IAAb,CAFxB,EAGGD,EAHH,CAGM,KAHN,EAGa,MAAM;AACfH,IAAAA,OAAO,CAACM,OAAR,CAAgB,MAAOC,GAAP,IAAe;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB,EAAsBH,GAAG,CAACI,KAA1B,EAAiCJ,GAAG,CAACK,YAArC;AAEA,YAAMC,MAA0B,GAAG;AACjCH,QAAAA,IAAI,EAAEH,GAAG,CAACG,IADuB;AAEjCI,QAAAA,UAAU,EAAEC,QAAQ,CAACR,GAAG,CAACO,UAAL,CAFa;AAGjCE,QAAAA,MAAM,EAAED,QAAQ,CAACR,GAAG,CAACU,cAAL,CAHiB;AAIjCC,QAAAA,cAAc,EAAEX,GAAG,CAACY,aAJa;AAKjCC,QAAAA,WAAW,EAAEb,GAAG,CAACI,KALgB;AAMjCU,QAAAA,EAAE,EAAEN,QAAQ,CAACR,GAAG,CAACc,EAAL,CANqB;AAOjCC,QAAAA,MAAM,EAAEP,QAAQ,CAACR,GAAG,CAACe,MAAL,CAPiB;AAQjCC,QAAAA,OAAO,EAAER,QAAQ,CAACR,GAAG,CAACgB,OAAL,CARgB;AASjCC,QAAAA,KAAK,EAAET,QAAQ,CAACR,GAAG,CAACiB,KAAL,CATkB;AAUjCC,QAAAA,aAAa,EAAEV,QAAQ,CAACR,GAAG,CAACmB,SAAL,CAVU;AAWjCC,QAAAA,cAAc,EAAEZ,QAAQ,CAACR,GAAG,CAACqB,UAAL,CAXS;AAYjCC,QAAAA,WAAW,EAAEtB,GAAG,CAACK,YAAJ,KAAqB;AAZD,OAAnC;;AAeA,UAAIL,GAAG,CAACuB,KAAJ,KAAc,EAAlB,EAAsB;AACpBjB,QAAAA,MAAM,CAACkB,aAAP,GAAuBxB,GAAG,CAACuB,KAA3B;AACD;;AAED,YAAMnC,MAAM,CAACqC,OAAP,CAAeC,MAAf,CAAsB;AAC1BC,QAAAA,KAAK,EAAE;AAAElB,UAAAA,MAAM,EAAED,QAAQ,CAACR,GAAG,CAACU,cAAL;AAAlB,SADmB;AAE1BkB,QAAAA,MAAM,EAAE;AACNzB,UAAAA,IAAI,EAAEH,GAAG,CAACG,IADJ;AAENI,UAAAA,UAAU,EAAEC,QAAQ,CAACR,GAAG,CAACO,UAAL,CAFd;AAGNE,UAAAA,MAAM,EAAED,QAAQ,CAACR,GAAG,CAACU,cAAL;AAHV,SAFkB;AAO1BJ,QAAAA;AAP0B,OAAtB,CAAN;AASD,KA/BD;AAiCAd,IAAAA,GAAG,CAACqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAErC,MAAAA,OAAO,EAAEA;AAAX,KAArB;AACD,GAtCH;AAuCD,CAxDD","sourcesContent":["import { PrismaClient, PokemonUpdateInput } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nimport csv from \"csv-parser\";\nimport fs from \"fs\";\n\nimport type { NextApiRequest, NextApiResponse } from \"next\";\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  const results: Array<{\n    name: string;\n    pokedex_number: string;\n    generation: string;\n    hp: string;\n    attack: string;\n    defense: string;\n    speed: string;\n    classfication: string; // Yes, there's a typo in the CSV heading\n    sp_attack: string;\n    sp_defense: string;\n    type1: string;\n    type2: string;\n    is_legendary: number;\n  }> = [];\n\n  fs.createReadStream(\"./data/pokemon.csv\")\n    .pipe(csv())\n    .on(\"data\", (data) => results.push(data))\n    .on(\"end\", () => {\n      results.forEach(async (row) => {\n        console.log(row.name, row.type1, row.is_legendary);\n\n        const update: PokemonUpdateInput = {\n          name: row.name,\n          generation: parseInt(row.generation),\n          number: parseInt(row.pokedex_number),\n          classification: row.classfication,\n          primaryType: row.type1,\n          hp: parseInt(row.hp),\n          attack: parseInt(row.attack),\n          defense: parseInt(row.defense),\n          speed: parseInt(row.speed),\n          specialAttack: parseInt(row.sp_attack),\n          specialDefense: parseInt(row.sp_defense),\n          isLegendary: row.is_legendary === 1,\n        };\n\n        if (row.type2 !== \"\") {\n          update.secondaryType = row.type2;\n        }\n\n        await prisma.pokemon.upsert({\n          where: { number: parseInt(row.pokedex_number) },\n          create: {\n            name: row.name,\n            generation: parseInt(row.generation),\n            number: parseInt(row.pokedex_number),\n          },\n          update,\n        });\n      });\n\n      res.status(200).json({ results: results });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}