{"ast":null,"code":"import { POKEMON, pickOne, emojiFor } from \"../pokemon\";\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (event, client, prisma) => {\n    const result = pickOne(POKEMON);\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id\n      }\n    });\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(result)}: It’s ${result.name.english}!`\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/assign.ts"],"names":["POKEMON","pickOne","emojiFor","id","triggerPhrase","respond","event","client","prisma","result","roll","create","data","teamId","team","userId","user","pokemonNumber","chat","postMessage","channel","text","name","english"],"mappings":"AAKA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,QAA3B,QAA2C,YAA3C;AAEA,eAAe;AACbC,EAAAA,EAAE,EAAE,mBADS;AAEbC,EAAAA,aAAa,EAAE,qBAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMC,MAAM,GAAGR,OAAO,CAACD,OAAD,CAAtB;AAEA,UAAMQ,MAAM,CAACE,IAAP,CAAYC,MAAZ,CAAmB;AACvBC,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEP,KAAK,CAACQ,IADV;AAEJC,QAAAA,MAAM,EAAET,KAAK,CAACU,IAFV;AAGJC,QAAAA,aAAa,EAAER,MAAM,CAACN;AAHlB;AADiB,KAAnB,CAAN;AAQA,UAAMI,MAAM,CAACW,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,MAAAA,OAAO,EAAEd,KAAK,CAACc,OADa;AAE5BC,MAAAA,IAAI,EAAG,KAAIf,KAAK,CAACU,IAAK,OAAMd,QAAQ,CAACO,MAAD,CAAS,UAC3CA,MAAM,CAACa,IAAP,CAAYC,OACb;AAJ2B,KAAxB,CAAN;AAMD;AAxBY,CAAf","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport { POKEMON, pickOne, emojiFor } from \"../pokemon\";\n\nexport default {\n  id: \"whos-that-pokemon\",\n  triggerPhrase: \"Who's that Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const result = pickOne(POKEMON);\n\n    await prisma.roll.create({\n      data: {\n        teamId: event.team,\n        userId: event.user,\n        pokemonNumber: result.id,\n      },\n    });\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(result)}: It’s ${\n        result.name.english\n      }!`,\n    });\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}