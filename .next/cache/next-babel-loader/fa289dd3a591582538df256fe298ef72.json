{"ast":null,"code":"import { POKEMON, emojiFor } from \"../pokemon\";\nexport default {\n  id: \"battle\",\n  triggerPhrase: \"Battle\",\n  respond: async (event, client, prisma) => {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: Battling with a :${emojiFor(result)}: ${JSON.stringify(event)}`\n    });\n    Array.from(event.text.matchAll(/<@(\\w+)>/)).forEach(async m => {\n      console.log(\"user\", m[1]);\n      const user = await client.users.info({\n        user: m[1]\n      });\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: User is ${JSON.stringify(user)}`\n      });\n    });\n    event.blocks.filter(b => b.type === \"user\").forEach(async b => {});\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/battle.ts"],"names":["POKEMON","emojiFor","id","triggerPhrase","respond","event","client","prisma","rolls","roll","findMany","where","teamId","team","userId","user","orderBy","createdAt","take","chat","postMessage","channel","text","result","pokemonNumber","JSON","stringify","Array","from","matchAll","forEach","m","console","log","users","info","blocks","filter","b","type"],"mappings":"AAKA,SAASA,OAAT,EAA2BC,QAA3B,QAA2C,YAA3C;AAEA,eAAe;AACbC,EAAAA,EAAE,EAAE,QADS;AAEbC,EAAAA,aAAa,EAAE,QAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMC,KAAK,GAAG,MAAMD,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqB;AACvCC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEP,KAAK,CAACQ,IAAhB;AAAsBC,QAAAA,MAAM,EAAET,KAAK,CAACU;AAApC,OADgC;AAEvCC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAF8B;AAGvCC,MAAAA,IAAI,EAAE;AAHiC,KAArB,CAApB;;AAMA,QAAIV,KAAK,CAAC,CAAD,CAAL,IAAY,IAAhB,EAAsB;AACpB,YAAMF,MAAM,CAACa,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,QAAAA,OAAO,EAAEhB,KAAK,CAACgB,OADa;AAE5BC,QAAAA,IAAI,EAAG,KAAIjB,KAAK,CAACU,IAAK;AAFM,OAAxB,CAAN;AAIA;AACD;;AAED,UAAMN,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAlB;AACA,UAAMe,MAAM,GAAGvB,OAAO,CAACS,IAAI,CAACe,aAAL,GAAqB,CAAtB,CAAtB;AAEA,UAAMlB,MAAM,CAACa,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,MAAAA,OAAO,EAAEhB,KAAK,CAACgB,OADa;AAE5BC,MAAAA,IAAI,EAAG,KAAIjB,KAAK,CAACU,IAAK,uBAAsBd,QAAQ,CAClDsB,MADkD,CAElD,KAAIE,IAAI,CAACC,SAAL,CAAerB,KAAf,CAAsB;AAJA,KAAxB,CAAN;AAOAsB,IAAAA,KAAK,CAACC,IAAN,CAAWvB,KAAK,CAACiB,IAAN,CAAWO,QAAX,CAAoB,UAApB,CAAX,EAA4CC,OAA5C,CAAoD,MAAOC,CAAP,IAAa;AAC/DC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,CAAC,CAAC,CAAD,CAArB;AACA,YAAMhB,IAAI,GAAG,MAAMT,MAAM,CAAC4B,KAAP,CAAaC,IAAb,CAAkB;AAAEpB,QAAAA,IAAI,EAAEgB,CAAC,CAAC,CAAD;AAAT,OAAlB,CAAnB;AACA,YAAMzB,MAAM,CAACa,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,QAAAA,OAAO,EAAEhB,KAAK,CAACgB,OADa;AAE5BC,QAAAA,IAAI,EAAG,KAAIjB,KAAK,CAACU,IAAK,cAAaU,IAAI,CAACC,SAAL,CAAeX,IAAf,CAAqB;AAF5B,OAAxB,CAAN;AAID,KAPD;AASAV,IAAAA,KAAK,CAAC+B,MAAN,CAAaC,MAAb,CAAqBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,MAAtC,EAA8CT,OAA9C,CAAsD,MAAOQ,CAAP,IAAa,CAAE,CAArE;AACD;AA1CY,CAAf","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport { POKEMON, pickOne, emojiFor } from \"../pokemon\";\n\nexport default {\n  id: \"battle\",\n  triggerPhrase: \"Battle\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    const result = POKEMON[roll.pokemonNumber - 1];\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: Battling with a :${emojiFor(\n        result\n      )}: ${JSON.stringify(event)}`,\n    });\n\n    Array.from(event.text.matchAll(/<@(\\w+)>/)).forEach(async (m) => {\n      console.log(\"user\", m[1]);\n      const user = await client.users.info({ user: m[1] });\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: User is ${JSON.stringify(user)}`,\n      });\n    });\n\n    event.blocks.filter((b) => b.type === \"user\").forEach(async (b) => {});\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}