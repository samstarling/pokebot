{"ast":null,"code":"import { emojiFor, imageFor, renderType, statusFor } from \"../pokemon\";\nexport default {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (event, client, prisma) => {\n    const rolls = await prisma.roll.findMany({\n      where: {\n        teamId: event.team,\n        userId: event.user\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      take: 1,\n      include: {\n        Pokemon: true\n      }\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(roll.Pokemon)}: ${roll.Pokemon.name}`,\n      icon_url: `https://gravel-pokebot.herokuapp.com/oak.png`,\n      username: \"Professor Oak\",\n      blocks: [{\n        type: \"section\",\n        text: {\n          type: \"mrkdwn\",\n          text: statusFor(roll.Pokemon)\n        },\n        fields: [{\n          type: \"mrkdwn\",\n          text: renderType(roll.Pokemon)\n        }, {\n          type: \"mrkdwn\",\n          text: `*HP*: ${roll.Pokemon.hp}`\n        }, {\n          type: \"mrkdwn\",\n          text: `*Attack*: ${roll.Pokemon.attack}`\n        }, {\n          type: \"mrkdwn\",\n          text: `*Defense*: ${roll.Pokemon.defense}`\n        }, {\n          type: \"mrkdwn\",\n          text: `*Speed*: ${roll.Pokemon.speed}`\n        }, {\n          type: \"mrkdwn\",\n          text: `*Sp. Attack*: ${roll.Pokemon.specialAttack}`\n        }, {\n          type: \"mrkdwn\",\n          text: `*Sp. Defense*: ${roll.Pokemon.specialDefense}`\n        }],\n        accessory: {\n          type: \"image\",\n          image_url: imageFor(roll.Pokemon),\n          alt_text: roll.Pokemon.name\n        }\n      }]\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/stats.ts"],"names":["emojiFor","imageFor","renderType","statusFor","id","triggerPhrase","respond","event","client","prisma","rolls","roll","findMany","where","teamId","team","userId","user","orderBy","createdAt","take","include","Pokemon","chat","postMessage","channel","text","name","icon_url","username","blocks","type","fields","hp","attack","defense","speed","specialAttack","specialDefense","accessory","image_url","alt_text"],"mappings":"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","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\nimport { emojiFor, imageFor, renderType, statusFor } from \"../pokemon\";\n\nexport default {\n  id: \"query-stats\",\n  triggerPhrase: \"How's my Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    const rolls = await prisma.roll.findMany({\n      where: { teamId: event.team, userId: event.user },\n      orderBy: { createdAt: \"desc\" },\n      take: 1,\n      include: {\n        Pokemon: true,\n      },\n    });\n\n    if (rolls[0] == null) {\n      await client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: You don't have one!`,\n      });\n      return;\n    }\n\n    const roll = rolls[0];\n\n    await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}>: :${emojiFor(roll.Pokemon)}: ${\n        roll.Pokemon.name\n      }`,\n      icon_url: `https://gravel-pokebot.herokuapp.com/oak.png`,\n      username: \"Professor Oak\",\n      blocks: [\n        {\n          type: \"section\",\n          text: {\n            type: \"mrkdwn\",\n            text: statusFor(roll.Pokemon),\n          },\n          fields: [\n            {\n              type: \"mrkdwn\",\n              text: renderType(roll.Pokemon),\n            },\n            {\n              type: \"mrkdwn\",\n              text: `*HP*: ${roll.Pokemon.hp}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: `*Attack*: ${roll.Pokemon.attack}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: `*Defense*: ${roll.Pokemon.defense}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: `*Speed*: ${roll.Pokemon.speed}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: `*Sp. Attack*: ${roll.Pokemon.specialAttack}`,\n            },\n            {\n              type: \"mrkdwn\",\n              text: `*Sp. Defense*: ${roll.Pokemon.specialDefense}`,\n            },\n          ],\n          accessory: {\n            type: \"image\",\n            image_url: imageFor(roll.Pokemon),\n            alt_text: roll.Pokemon.name,\n          },\n        },\n      ],\n    });\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}