{"ast":null,"code":"// pages/api/slackInteractiveEndpoint.js\nimport { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\nconst web = new WebClient(process.env.SLACK_TOKEN);\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\nslackEvents.on(\"app_mention\", event => {\n  console.log(`Received a message event: user ${event.user} in channel ${event.channel} says ${event.text}`);\n});\nslackEvents.on(\"error\", error => {\n  console.log(error.name); // TypeError\n});\nexport default slackEvents.requestListener();\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/pages/api/event.ts"],"names":["createEventAdapter","WebClient","web","process","env","SLACK_TOKEN","slackEvents","SLACK_SIGNING_SECRET","on","event","console","log","user","channel","text","error","name","requestListener","config","api","bodyParser","externalResolver"],"mappings":"AAAA;AAEA,SAASA,kBAAT,QAAmC,mBAAnC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,MAAMC,GAAG,GAAG,IAAID,SAAJ,CAAcE,OAAO,CAACC,GAAR,CAAYC,WAA1B,CAAZ;AACA,MAAMC,WAAW,GAAGN,kBAAkB,CAACG,OAAO,CAACC,GAAR,CAAYG,oBAAZ,IAAoC,EAArC,CAAtC;AAEAD,WAAW,CAACE,EAAZ,CAAe,aAAf,EAA+BC,KAAD,IAAW;AACvCC,EAAAA,OAAO,CAACC,GAAR,CACG,kCAAiCF,KAAK,CAACG,IAAK,eAAcH,KAAK,CAACI,OAAQ,SAAQJ,KAAK,CAACK,IAAK,EAD9F;AAGD,CAJD;AAMAR,WAAW,CAACE,EAAZ,CAAe,OAAf,EAAyBO,KAAD,IAAW;AACjCL,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,IAAlB,EADiC,CACR;AAC1B,CAFD;AAIA,eAAeV,WAAW,CAACW,eAAZ,EAAf;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE,KADT;AAEHC,IAAAA,gBAAgB,EAAE;AAFf;AADe,CAAf","sourcesContent":["// pages/api/slackInteractiveEndpoint.js\n\nimport { createEventAdapter } from \"@slack/events-api\";\nimport { WebClient } from \"@slack/web-api\";\n\nconst web = new WebClient(process.env.SLACK_TOKEN);\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET || \"\");\n\nslackEvents.on(\"app_mention\", (event) => {\n  console.log(\n    `Received a message event: user ${event.user} in channel ${event.channel} says ${event.text}`\n  );\n});\n\nslackEvents.on(\"error\", (error) => {\n  console.log(error.name); // TypeError\n});\n\nexport default slackEvents.requestListener();\n\nexport const config = {\n  api: {\n    bodyParser: false,\n    externalResolver: true,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}