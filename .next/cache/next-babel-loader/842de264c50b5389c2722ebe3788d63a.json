{"ast":null,"code":"import { emojiFor, assignRandomPokemon } from \"../pokemon\";\n\nfunction getNumber(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport default {\n  id: \"whos-that-pokemon-2\",\n  triggerPhrase: \"Who's that new Pokémon?\",\n  respond: async (event, client, prisma) => {\n    assignRandomPokemon(prisma, event.team, event.user, 2).then(roll => {\n      const message = `:${emojiFor(roll.Pokemon)}: It’s ${roll.Pokemon.name}!`;\n      client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${message}`\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/assignNew.ts"],"names":["emojiFor","assignRandomPokemon","getNumber","min","max","Math","floor","random","id","triggerPhrase","respond","event","client","prisma","team","user","then","roll","message","Pokemon","name","chat","postMessage","channel","text"],"mappings":"AAKA,SAASA,QAAT,EAAmBC,mBAAnB,QAA8C,YAA9C;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAgCC,GAAhC,EAAqD;AACnD,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP;AACD;;AAED,eAAe;AACbK,EAAAA,EAAE,EAAE,qBADS;AAEbC,EAAAA,aAAa,EAAE,yBAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACHZ,IAAAA,mBAAmB,CAACY,MAAD,EAASF,KAAK,CAACG,IAAf,EAAqBH,KAAK,CAACI,IAA3B,EAAiC,CAAjC,CAAnB,CAAuDC,IAAvD,CAA6DC,IAAD,IAAU;AACpE,YAAMC,OAAO,GAAI,IAAGlB,QAAQ,CAACiB,IAAI,CAACE,OAAN,CAAe,UAASF,IAAI,CAACE,OAAL,CAAaC,IAAK,GAAtE;AACAR,MAAAA,MAAM,CAACS,IAAP,CAAYC,WAAZ,CAAwB;AACtBC,QAAAA,OAAO,EAAEZ,KAAK,CAACY,OADO;AAEtBC,QAAAA,IAAI,EAAG,KAAIb,KAAK,CAACI,IAAK,MAAKG,OAAQ;AAFb,OAAxB;AAID,KAND;AAOD;AAfY,CAAf","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \".\";\nimport { emojiFor, assignRandomPokemon } from \"../pokemon\";\n\nfunction getNumber(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport default {\n  id: \"whos-that-pokemon-2\",\n  triggerPhrase: \"Who's that new Pokémon?\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    assignRandomPokemon(prisma, event.team, event.user, 2).then((roll) => {\n      const message = `:${emojiFor(roll.Pokemon)}: It’s ${roll.Pokemon.name}!`;\n      client.chat.postMessage({\n        channel: event.channel,\n        text: `<@${event.user}>: ${message}`,\n      });\n    });\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}