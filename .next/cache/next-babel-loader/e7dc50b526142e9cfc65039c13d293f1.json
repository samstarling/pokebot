{"ast":null,"code":"import { emojiFor } from \"../pokemon\";\nexport default {\n  id: \"help\",\n  triggerPhrase: \"Help\",\n  respond: async (event, client, prisma) => {\n    await prisma.roll.findMany({\n      where: {\n        userId: event.user\n      },\n      include: {\n        Pokemon: true\n      }\n    }).then(async (r) => r.forEach(await client.chat.postMessage({\n      channel: event.channel,\n      text: `<@${event.user}> :${emojiFor(r.Pokemon)}: ${r.Pokemon.name} ${r.createdAt}`\n    })));\n  }\n};","map":{"version":3,"sources":["/Users/samstarling/Development/personal/pokebot/lib/responders/history.ts"],"names":["emojiFor","id","triggerPhrase","respond","event","client","prisma","roll","findMany","where","userId","user","include","Pokemon","then","r","forEach","chat","postMessage","channel","text","name","createdAt"],"mappings":"AAGA,SAASA,QAAT,QAAyB,YAAzB;AAIA,eAAe;AACbC,EAAAA,EAAE,EAAE,MADS;AAEbC,EAAAA,aAAa,EAAE,MAFF;AAGbC,EAAAA,OAAO,EAAE,OACPC,KADO,EAEPC,MAFO,EAGPC,MAHO,KAIJ;AACH,UAAMA,MAAM,CAACC,IAAP,CACHC,QADG,CACM;AACRC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEN,KAAK,CAACO;AAAhB,OADC;AAERC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAFD,KADN,EAKHC,IALG,CAKE,OAAOC,CAAP,KACJA,CAAC,CAACC,OAAF,CACE,MAAMX,MAAM,CAACY,IAAP,CAAYC,WAAZ,CAAwB;AAC5BC,MAAAA,OAAO,EAAEf,KAAK,CAACe,OADa;AAE5BC,MAAAA,IAAI,EAAG,KAAIhB,KAAK,CAACO,IAAK,MAAKX,QAAQ,CAACe,CAAC,CAACF,OAAH,CAAY,KAC7CE,CAAC,CAACF,OAAF,CAAUQ,IACX,IAAGN,CAAC,CAACO,SAAU;AAJY,KAAxB,CADR,CANE,CAAN;AAeD;AAvBY,CAAf","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { PrismaClient } from \"@prisma/client\";\n\nimport { emojiFor } from \"../pokemon\";\nimport { MentionEvent } from \"../slack\";\nimport { Responder } from \"./\";\n\nexport default {\n  id: \"help\",\n  triggerPhrase: \"Help\",\n  respond: async (\n    event: MentionEvent,\n    client: WebClient,\n    prisma: PrismaClient\n  ) => {\n    await prisma.roll\n      .findMany({\n        where: { userId: event.user },\n        include: { Pokemon: true },\n      })\n      .then(async (r) =>\n        r.forEach(\n          await client.chat.postMessage({\n            channel: event.channel,\n            text: `<@${event.user}> :${emojiFor(r.Pokemon)}: ${\n              r.Pokemon.name\n            } ${r.createdAt}`,\n          })\n        )\n      );\n  },\n} as Responder;\n"]},"metadata":{},"sourceType":"module"}